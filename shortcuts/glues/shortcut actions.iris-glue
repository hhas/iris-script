shortcut_action facetime { «Calls the contact passed in as input using FaceTime.»
		app: IntentAppIdentifier as hidden_parameter {optional intent_app_picker with_default “com.apple.TelephonyUtilities.PhoneIntentHandler”}
		call_type: WFFaceTimeType as optional face_time_type_picker with_default “Video”
		contact: WFFaceTimeContact as contact_field} returning input requires {
	id: “com.apple.facetime.facetime”
	category: “Contacts/Phone”
	tags: [#phone, #number, #call]
}

shortcut_action create_note { «Creates a note using the content passed as input.»
		_ as ordered_list of: string
		app: IntentAppIdentifier as hidden_parameter {optional intent_app_picker with_default “com.apple.mobilenotes”}
		show_compose_sheet: ShowWhenRun as optional boolean with_default true
		folder: WFNoteGroup as note_group_picker
		body: WFCreateNoteInput as single_line_string} returning note requires {
	id: “com.apple.mobilenotes.SharingExtension”
	category: “Documents/Notes”
	tags: [#apple]
}

shortcut_action call { «Calls the phone number passed in as input.»
		app: IntentAppIdentifier as hidden_parameter {optional intent_app_picker with_default “com.apple.TelephonyUtilities.PhoneIntentHandler”}
		contact: WFCallContact as contact_field} returning input requires {
	id: “com.apple.mobilephone.call”
	category: “Contacts/Phone”
	tags: [#phone, #number, #dial, #mobile, #telephone]
}

shortcut_action post_to_shared_album {
		_ as ordered_list of: (image OR photo_media)
		images: ImageInput as identifier} returning nothing requires {
	id: “com.apple.mobileslideshow.StreamShareService”
	category: “Sharing”
	tags: [#post, #stream, #share, #with, #icloud, #photo, #sharing]
}

shortcut_action save_with_transmit {
		_ as ordered_list of: generic_file
		save_to: TransmitSaveTo as optional choice [“Local”, “Remote”] with_default “Remote”
		favorite_name: TransmitFavoriteName as single_line_string
		path: TransmitPath as single_line_string} returning nothing requires {
	id: “com.panic.iOS.Transmit.Share”
	category: “Sharing”
	tags: [#upload, #ftp, #sftp, #webdav, #amazon, #‘s3’, #transmit, #panic]
}

shortcut_action add_frame_to_gif { «Adds an image to the existing animated GIF passed as input. If no GIF is passed as input, a new animated GIF is created.»
		_ as image
		image: WFImage as identifier
		gif: WFInputGIF as identifier
		delay_time: WFGIFDelayTime as optional number with_default 0.25
		auto_size: WFGIFAutoSize as optional boolean with_default true
		width: WFGIFManualSizeWidth as integer
		height: WFGIFManualSizeHeight as integer} returning gif_image «GIF» requires {
	id: “is.workflow.actions.addframetogif”
	category: “Media/GIFs”
	tags: [#animate, #make, #generate, #gif]
}

shortcut_action add_to_up_next { «Adds the music passed as input to your Up Next queue.»
		play: WFWhenToPlay as optional choice [“Next”, “Later”] with_default “Next” but_not [variable]
		music: WFMusic as identifier} returning input requires {
	id: “is.workflow.actions.addmusictoupnext”
	category: “Media/Up Next”
	tags: [#song, #music, #itunes, #up_next, #apple, #album, #next, #play]
}

shortcut_action add_new_event { «Creates a new event and adds it to the selected calendar.»
		title: WFCalendarItemTitle as single_line_string
		location: WFCalendarItemLocation as single_line_string
		calendar: WFCalendarItemCalendar as calendar_picker
		start_date: WFCalendarItemStartDate as date
		end_date: WFCalendarItemEndDate as date
		all_day: WFCalendarItemAllDay as boolean
		alert: WFAlertTime as choice [“At time of event”, “5 minutes before”, “15 minutes before”, “30 minutes before”, “1 hour before”, “2 hours before”, “1 day before”, “2 days before”, “1 week before”, “Custom”] but_not [variable]
		alert_time: WFAlertCustomTime as single_line_string
		notes: WFCalendarItemNotes as string} returning event «New Event» requires {
	id: “is.workflow.actions.addnewevent”
	category: “Calendar/Calendar”
	tags: [#create, #calendar]
}

shortcut_action add_new_reminder { «Creates a new reminder and adds it to the selected list of reminders.»
		reminder: WFCalendarItemTitle as single_line_string
		list: WFCalendarItemCalendar as reminders_list_picker
		alert: WFAlertEnabled as optional choice [“No Alert”, “Alert”] with_default “No Alert”
		trigger: WFAlertCondition as optional choice [“At Time”, “When I Arrive”, “When I Leave”, “When Messaging”] with_default “At Time”
		location: WFAlertLocation as location
		person: WFAlertPerson as contact_field
		radius: WFAlertLocationRadius as optional unit_quantity_field with_default 1000
		‘2:00_pm’: WFAlertCustomTime as date
		priority: WFPriority as optional choice [“None”, “Low”, “Medium”, “High”] with_default “None”
		flag: WFFlag as boolean
		url: WFURL as URL
		images: WFImages as identifier
		notes: WFCalendarItemNotes as string} returning reminder «New Reminder» requires {
	id: “is.workflow.actions.addnewreminder”
	category: “Calendar/Reminders”
	tags: [#create, #calendar, #task, #todo, #to_do]
}

shortcut_action street_address { «Passes the specified address to the next action.»
		line_1: WFAddressLine1 as single_line_string
		line_2: WFAddressLine2 as single_line_string
		city: WFCity as single_line_string
		state: WFState as single_line_string
		postal_code: WFPostalCode as single_line_string
		region: WFCountry as country_field} returning street_address «Street Address» requires {
	id: “is.workflow.actions.address”
	category: “Location/Addresses”
	tags: [#maps, #search, #query, #place, #location, #find]
}

shortcut_action add_to_playlist { «Adds the items passed as input to the specified playlist.»
		_ as ordered_list of: (i_tunes_product OR mp_media)
		playlist: WFPlaylistName as playlist_picker
		music: WFInput as identifier} returning ordered_list of: media_item «Updated Playlist» requires {
	id: “is.workflow.actions.addtoplaylist”
	category: “Media/Playlists”
	tags: [#song, #music, #itunes, #playlist, #apple, #album]
}

shortcut_action adjust_date { «Adds or subtracts an amount of time from the date passed into the action.»
		_ as ordered_list of: (date OR calendar_event OR time_interval)
		date: WFDate as date
		adjust_operation: WFAdjustOperation as optional choice [“Add”, “Subtract”, “Get Start of Minute”, “Get Start of Hour”, “Get Start of Day”, “Get Start of Week”, “Get Start of Month”, “Get Start of Year”] with_default “Add” but_not [ask, variable]
		duration: WFDuration as duration_quantity_field} returning ordered_list of: date «Adjusted Date» requires {
	«This action supports decimal numbers when adding or subtracting seconds, minutes, hours, or days. Otherwise only integers are supported.»
	id: “is.workflow.actions.adjustdate”
	category: “Calendar/Dates”
	tags: [#add, #subtract, #math, #time, #get, #start, #of, #minute, #hour, #day, #month, #year]
}

shortcut_action airdrop { «Prompts to share the input via AirDrop.»
		content: WFInput as identifier} returning input requires {
	id: “is.workflow.actions.airdropdocument”
	category: “Sharing/System”
	tags: [#airdrop, #file, #document, #send, #share]
}

shortcut_action show_alert { «Displays an alert with a title, a message, and two buttons. If the user selects the OK button, the shortcut continues. The cancel button stops the shortcut.»
		title: WFAlertActionTitle as single_line_string but_not [ask]
		message: WFAlertActionMessage as optional string with_default “Do you want to continue?” but_not [ask]
		show_cancel_button: WFAlertActionCancelButtonShown as optional boolean with_default true but_not [ask]} returning input requires {
	id: “is.workflow.actions.alert”
	category: “Scripting/Notification”
	tags: [#message, #ask, #display, #prompt, #show, #confirmation]
}

shortcut_action append_to_note { «Appends the text passed as input to the specified note.»
		_ as ordered_list of: string
		app: IntentAppIdentifier as hidden_parameter {optional intent_app_picker with_default “com.apple.mobilenotes”}
		note: WFNote as identifier
		text: WFInput as single_line_string} returning note «Appended Note» requires {
	id: “is.workflow.actions.appendnote”
	category: “Documents/Notes”
	tags: [#apple]
}

shortcut_action add_to_variable { «Appends this action's input to the specified variable, creating the variable if it does not exist.

This allows you to make a variable hold multiple items.»
		_ as ordered_list of: item
		variable: WFVariableName as identifier
		input: WFInput as identifier} returning ordered_list of: item «Variable» requires {
	id: “is.workflow.actions.appendvariable”
	category: “Scripting/Variables”
	tags: [#add]
}

shortcut_action markup { «Edits an image or PDF with Markup.»
		_ as ordered_list of: (image OR pdf)
		document: WFDocument as identifier} returning ordered_list of: (image OR pdf) «Markup Result» requires {
	id: “is.workflow.actions.avairyeditphoto”
	category: “/Editing”
	tags: [#edit, #photo, #modify, #picture, #aviary, #adobe, #pdf, #sign, #draw, #document]
}

shortcut_action base64_encode { «Encodes or decodes text or files using Base64 encoding.»
		_ as ordered_list of: (string OR data)
		mode: WFEncodeMode as optional choice [“Encode”, “Decode”] with_default “Encode”
		line_breaks: WFBase64LineBreakMode as optional choice [“None”, “Every 64 Characters”, “Every 76 Characters”] with_default “Every 76 Characters”
		input: WFInput as identifier} returning ordered_list of: (string OR data) «Base64 Encoded» requires {
	id: “is.workflow.actions.base64encode”
	category: “Scripting/Files”
	tags: [#base, #‘64’, #encode, #decode]
}

shortcut_action calculate_expression { «Evaluates the mathematical expression in the given input string and outputs the result as a number.»
		_ as string
		input: Input as single_line_string} returning decimal_number «Calculation Result» requires {
	id: “is.workflow.actions.calculateexpression”
	category: “Scripting/Math”
	tags: [#evaluate, #expression, #math]
}

shortcut_action choose_from_list { «Presents a menu of the items passed as input to the action and outputs the user's selection.»
		_ as ordered_list of: (image OR keyed_list OR item)
		list: WFInput as identifier
		prompt: WFChooseFromListActionPrompt as optional single_line_string with_default “” but_not [ask]
		select_multiple: WFChooseFromListActionSelectMultiple as optional boolean with_default false
		select_all_initially: WFChooseFromListActionSelectAll as optional boolean with_default false} returning item «Chosen Item» requires {
	id: “is.workflow.actions.choosefromlist”
	category: “Scripting/Lists”
	tags: [#choose, #select, #list, #options, #menu, #multiple]
}

shortcut_action choose_from_menu { «Presents a menu and runs different actions based on which menu item was chosen.»
		prompt: WFMenuPrompt as single_line_string but_not [ask]
		items: WFMenuItems as optional array with_default [“One”, “Two”]} returning input requires {
	id: “is.workflow.actions.choosefrommenu”
	category: “Scripting/Control Flow”
	tags: [#list, #prompt, #select, #action, #sheet, #switch]
}

shortcut_action clear_up_next { «Clears all the music in your Up Next queue.»} returning input requires {
	id: “is.workflow.actions.clearupnext”
	category: “Media/Up Next”
	tags: [#song, #music, #itunes, #up_next, #apple, #album, #next, #play, #clear]
}

shortcut_action upload_to_cloudapp { «Uploads the input to CloudApp and returns the CloudApp URL.»
		_ as ordered_list of: (generic_file OR url)
		link_privacy: WFCloudAppPrivacyType as optional choice [“Private”, “Public”] with_default “Private”
		content: WFInput as identifier} returning ordered_list of: URL «CloudApp URLs» requires {
	id: “is.workflow.actions.cloudapp.upload”
	category: “Sharing”
	tags: []
}

shortcut_action comment { «This action lets you explain how part of a shortcut works. When run, this action does nothing.»
		comment_action_text: WFCommentActionText as string but_not [ask, variable]} returning input requires {
	id: “is.workflow.actions.comment”
	category: “Scripting/No-ops”
	tags: [#note, #explain]
}

shortcut_action if { «Tests if a condition is true, and if so, runs the actions inside. Otherwise, the actions under “Otherwise” are run.»
		input: WFInput as conditional_subject but_not [ask]
		condition: WFCondition as conditional_operator
		conditional_action_string: WFConditionalActionString as single_line_string
		number_value: WFNumberValue as number
		another_number: WFAnotherNumber as number
		bounded_number: WFBoundedNumber as slider
		another_bounded_number: WFAnotherBoundedNumber as slider
		date: WFDate as date
		another_date: WFAnotherDate as date
		measurement: WFMeasurement as unit_quantity_field
		another_measurement: WFAnotherMeasurement as unit_quantity_field
		duration: WFDuration as duration_quantity_field
		another_duration: WFAnotherDuration as duration_quantity_field
		enumeration: WFEnumeration as dynamic_choice
		numeric_enumeration: WFNumericEnumeration as numeric_dynamic_enumeration} returning input requires {
	id: “is.workflow.actions.conditional”
	category: “Scripting/Control Flow”
	tags: [#statement, #conditional, #then]
}

shortcut_action contacts { «Passes the specified contacts to the next action.»
		contact: WFContact as contact_field} returning ordered_list of: contact «Contacts» requires {
	id: “is.workflow.actions.contacts”
	category: “Contacts/Contacts”
	tags: [#contact, #person, #people]
}

shortcut_action count { «Counts the number of items, characters, words, sentences, or lines passed as input.»
		_ as ordered_list of: (item OR string)
		type: WFCountType as optional choice [“Items”, “Characters”, “Words”, “Sentences”, “Lines”] with_default “Items”
		input: Input as identifier} returning decimal_number «Count» requires {
	«This is just like the Count in Sesame Street, but instead of a vampire, it's a Shortcuts action.»
	id: “is.workflow.actions.count”
	category: “Scripting/Items”
	tags: [#get, #number, #length, #list]
}

shortcut_action create_playlist { «Creates a new playlist in the Music app, adding any items passed as input to the new playlist.»
		_ as ordered_list of: (i_tunes_product OR mp_media)
		playlist_name: WFPlaylistName as single_line_string
		author: WFPlaylistAuthor as single_line_string
		description: WFPlaylistDescription as single_line_string
		music: WFPlaylistItems as identifier} returning ordered_list of: media_item «New Playlist» requires {
	id: “is.workflow.actions.createplaylist”
	category: “Media/Playlists”
	tags: [#song, #music, #itunes, #playlist, #apple, #album]
}

shortcut_action date { «Passes the specified date and time to the next action.»
		use: WFDateActionMode as optional choice [“Current Date”, “Specified Date”] with_default “Current Date”
		date: WFDateActionDate as date} returning date «Date» requires {
	id: “is.workflow.actions.date”
	category: “Calendar/Dates”
	tags: [#date, #set_date, #pass_date, #time, #current, #now, #get]
}

shortcut_action show_content_attribution { «Shows the Content Source of Input contents»
		input: Input as identifier} returning input requires {
	id: “is.workflow.actions.debug.contentattribution”
	category: “Scripting/Items”
	tags: [#mdm, #content_source, #data_info]
}

shortcut_action wait { «Waits for the specified number of seconds before continuing with the next action.»
		delay_time: WFDelayTime as optional stepper with_default 1} returning input requires {
	id: “is.workflow.actions.delay”
	category: “Scripting/Control Flow”
	tags: [#time, #delay, #script, #wait, #second]
}

shortcut_action delete_photos { «Deletes the photos passed as input from the device's photo library. This action asks for confirmation before performing the deletion.»
		_ as ordered_list of: photo} returning nothing requires {
	id: “is.workflow.actions.deletephotos”
	category: “Media/Photos”
	tags: [#remove, #trash, #picture]
}

shortcut_action send_via_deskconnect { «Sends the input to another device via DeskConnect. DeskConnect makes it easy to send web pages, documents, pictures, and anything else between your devices.»
		content: WFInput as identifier} returning input requires {
	id: “is.workflow.actions.deskconnect.send”
	category: “Sharing”
	tags: [#airdrop, #push, #desk, #connect, #device, #mac, #share]
}

shortcut_action get_addresses_from_input { «Returns any street addresses found in the output from the previous action.»
		_ as ordered_list of: street_address
		input: WFInput as identifier} returning ordered_list of: location «Addresses» requires {
	id: “is.workflow.actions.detect.address”
	category: “Location/Addresses”
	tags: [#address, #street, #detect, #scan, #map]
}

shortcut_action get_contacts_from_input { «Gets contacts from the result of the previous action.»
		_ as ordered_list of: contact
		input: WFInput as identifier} returning ordered_list of: contact «Contacts» requires {
	id: “is.workflow.actions.detect.contacts”
	category: “Contacts/Contacts”
	tags: [#find, #detect, #people, #person, #email, #e_mail, #phone]
}

shortcut_action get_dates_from_input { «Returns any dates found in the output from the previous action.»
		_ as ordered_list of: date
		input: WFInput as identifier} returning ordered_list of: date «Dates» requires {
	id: “is.workflow.actions.detect.date”
	category: “Calendar/Dates”
	tags: [#date, #time, #detect, #scan]
}

shortcut_action get_dictionary_from_input { «Makes a dictionary from the text passed as input. JSON (like {"foo": "bar"}), key-value pairs (like foo=bar&baz=biz), and XML-based plist are supported.»
		_ as ordered_list of: keyed_list
		input: WFInput as identifier} returning ordered_list of: keyed_list «Dictionary» requires {
	id: “is.workflow.actions.detect.dictionary”
	category: “Scripting/Dictionaries”
	tags: [#json, #xml, #plist, #www, #urlencoded, #form, #query, #string]
}

shortcut_action get_email_addresses_from_input { «Returns any email addresses found in the output from the previous action.»
		_ as ordered_list of: email_address
		input: WFInput as single_line_string} returning ordered_list of: email_address «Email Addresses» requires {
	id: “is.workflow.actions.detect.emailaddress”
	category: “Contacts/Email”
	tags: [#find, #search, #detect, #scan, #e_mail, #emails]
}

shortcut_action get_images_from_input { «Gets images from the result of the previous action.

For example, this action can get the album art of a song, or all the images on a web page.»
		_ as ordered_list of: image
		input: WFInput as identifier} returning ordered_list of: image «Images» requires {
	id: “is.workflow.actions.detect.images”
	category: “Media/Images”
	tags: [#find, #search, #detect, #scan, #e_mail, #emails]
}

shortcut_action get_urls_from_input { «Returns any links found in the output from the previous action.»
		_ as ordered_list of: URL
		input: WFInput as single_line_string} returning ordered_list of: url «URLs» requires {
	id: “is.workflow.actions.detect.link”
	category: “Web/URLs”
	tags: [#link, #web, #site, #detect, #scan]
}

shortcut_action get_numbers_from_input { «Returns numbers from the previous action's output.»
		_ as ordered_list of: number
		input: WFInput as number} returning ordered_list of: number «Numbers» requires {
	id: “is.workflow.actions.detect.number”
	category: “Scripting/Numbers”
	tags: [#numeric, #digits, #detect, #extract, #scan]
}

shortcut_action get_phone_numbers_from_input { «Returns any phone numbers found in the output from the previous action.»
		_ as ordered_list of: phone_number
		input: WFInput as single_line_string} returning ordered_list of: phone_number «Phone Numbers» requires {
	id: “is.workflow.actions.detect.phonenumber”
	category: “Contacts/Phone”
	tags: [#phone, #number, #detect, #scan]
}

shortcut_action get_text_from_input { «Returns text from the previous action's output.

For example, this action can get the name of a photo or song, or the text of a web page.»
		_ as ordered_list of: item
		input: WFInput as identifier} returning ordered_list of: string «Text» requires {
	id: “is.workflow.actions.detect.text”
	category: “Documents/Text”
	tags: [#find, #search, #detect, #scan, #e_mail, #emails]
}

shortcut_action detect_language_with_microsoft { «Detects the language of the text provided as input.»
		_ as ordered_list of: string
		text: WFInput as single_line_string} returning ordered_list of: string «Language» requires {
	«Powered by Microsoft Cognitive Services (microsoft.com/cognitive-services)»
	id: “is.workflow.actions.detectlanguage”
	category: “Documents/Translation”
	tags: [#translate, #get, #text]
}

shortcut_action dictate_text { «Transcribes what you say aloud into text and passes the result to the next action.»
		language: WFSpeechLanguage as dictate_text_language_picker
		stop_listening: WFDictateTextStopListening as optional choice [“After Pause”, “After Short Pause”, “On Tap”] with_default “After Pause”} returning string «Dictated Text» requires {
	id: “is.workflow.actions.dictatetext”
	category: “Documents/Text”
	tags: [#speech, #detection, #dictation, #speak, #say, #voice, #recognize, #microphone, #transcribe, #transcription, #siri]
}

shortcut_action dictionary { «Passes the specified list of key-value pairs to the next action as a dictionary.»
		items: WFItems as keyed_list} returning keyed_list «Dictionary» requires {
	«When coerced to text, the dictionary is represented as JSON.»
	id: “is.workflow.actions.dictionary”
	category: “Scripting/Dictionaries”
	tags: [#json, #plist]
}

shortcut_action set_do_not_disturb { «Sets the device’s Do Not Disturb to on or off»
		do_not_disturb: Enabled as optional boolean with_default false
		until: AssertionType as optional choice [“Turned Off”, “Time”, “I Leave”, “Event Ends”] with_default “Turned Off” but_not [variable]
		event: Event as identifier
		time: Time as date} returning input requires {
	id: “is.workflow.actions.dnd.set”
	category: “Scripting/Device”
	tags: [#dnd, #toggle, #turn]
}

shortcut_action get_file { «Get files from iCloud Drive or Dropbox. Turn off “Show Document Picker” to specify a path to retrieve.»
		service: WFFileStorageService as storage_service_picker
		show_document_picker: WFShowFilePicker as optional boolean with_default true
		select_multiple: SelectMultiple as optional boolean with_default false
		file_path: WFGetFilePath as single_line_string
		initial_path: WFGetFileInitialDirectoryPath as single_line_string
		error_if_not_found: WFFileErrorIfNotFound as optional boolean with_default true} returning ordered_list of: data «File» requires {
	«In the iCloud picker, tap “Locations” to see document pickers from other apps.»
	id: “is.workflow.actions.documentpicker.open”
	category: “Documents/File Storage”
	tags: [#pick, #select, #file, #document, #‘filepicker.io’, #filepicker, #ink]
}

shortcut_action save_file { «Save files to iCloud Drive or Dropbox. Turn off “Ask Where to Save” in order to specify a destination path.»
		_ as ordered_list of: data
		service: WFFileStorageService as storage_service_picker
		ask_where_to_save: WFAskWhereToSave as optional boolean with_default true
		destination_path: WFFileDestinationPath as single_line_string
		overwrite_if_file_exists: WFSaveFileOverwrite as boolean
		file: WFInput as identifier} returning ordered_list of: data «Saved File» requires {
	«In the iCloud picker, tap “Locations” to see document pickers from other apps.»
	id: “is.workflow.actions.documentpicker.save”
	category: “Documents/File Storage”
	tags: [#save, #file, #document, #icloud, #cloud, #upload]
}

shortcut_action get_contents_of_url { «Gets the contents of URLs passed into the action. Useful for downloading files and web content, or for making API requests.»
		_ as ordered_list of: url
		url: WFURL as single_line_string
		http_method: WFHTTPMethod as optional choice [“GET”, “POST”, “PUT”, “PATCH”, “DELETE”] with_default “GET”
		show_headers: ShowHeaders as expanding
		http_headers: WFHTTPHeaders as keyed_list
		http_body_type: WFHTTPBodyType as optional choice [“JSON”, “Form”, “File”] with_default “JSON” but_not [ask, variable]
		form_values: WFFormValues as keyed_list
		json_values: WFJSONValues as keyed_list
		request_variable: WFRequestVariable as identifier} returning ordered_list of: data «Contents of URL» requires {
	«To make a multipart HTTP request, choose "Form" as the request body type and add files as field values.»
	id: “is.workflow.actions.downloadurl”
	category: “Web/Web Requests”
	tags: [#url, #web, #display, #site, #open, #show, #post, #put, #api, #curl, #wget, #http, #headers, #request, #form]
}

shortcut_action email_address { «Passes the specified email addresses to the next action.»
		email_address: WFEmailAddress as email_address_field} returning ordered_list of: email_address «Email Address» requires {
	id: “is.workflow.actions.email”
	category: “Contacts/Email”
	tags: [#emails, #e_mails, #address]
}

shortcut_action encode_media { «Re-encodes the media passed as input at the specified size, optionally converting to audio.»
		_ as ordered_list of: asset
		media: WFMedia as identifier
		audio_only: WFMediaAudioOnly as optional boolean with_default false
		format: WFMediaAudioFormat as optional choice [“M4A”, “AIFF”] with_default “M4A”
		size: WFMediaSize as optional choice [“640x480”, “960x540”, “1280x720”, “1920x1080”, “HEVC 1920x1080”, “HEVC 3840x2160”, “Passthrough”] with_default “Passthrough”
		speed: WFMediaSpeed as optional choice [“0.5X”, “Normal”, “2X”, “Custom”] with_default “Normal”
		custom_speed: WFMediaCustomSpeed as number
		metadata: Metadata as expanding
		title: WFMetadataTitle as single_line_string
		artist: WFMetadataArtist as single_line_string
		album: WFMetadataAlbum as single_line_string
		genre: WFMetadataGenre as single_line_string
		year: WFMetadataYear as single_line_string
		artwork: WFMetadataArtwork as identifier} returning ordered_list of: asset «Encoded Media» requires {
	id: “is.workflow.actions.encodemedia”
	category: “Media/Video”
	tags: [#quicktime, #render, #audio, #transcode, #metadata, #artwork, #‘id3’, #video]
}

shortcut_action append_to_evernote { «Finds a note using the specified criteria and appends the input to the note.»
		_ as ordered_list of: item
		content: WFInput as identifier
		note_title: WFEvernoteNotesTitleSearch as single_line_string
		mode: WFEvernoteWriteMode as optional choice [“Append”, “Prepend”] with_default “Append”
		in_notebook: WFEvernoteNotesNotebookName as evernote_notebook_picker} returning note_ref «Note» requires {
	id: “is.workflow.actions.evernote.append”
	category: “Documents”
	tags: [#add, #prepend, #save, #evernote]
}

shortcut_action delete_notes { «Deletes the notes passed as input from Evernote.»
		_ as ordered_list of: note_ref
		confirm_before_deleting: WFEvernoteConfirmDeletion as optional boolean with_default true
		notes: WFInput as identifier} returning nothing requires {
	id: “is.workflow.actions.evernote.delete”
	category: “Documents”
	tags: [#banish, #demolish, #remove, #peace, #byebye]
}

shortcut_action get_notes { «Get recent notes from Evernote, optionally filtering based on criteria.»
		evernote_notes_title_search: WFEvernoteNotesTitleSearch as single_line_string
		evernote_notes_tags: WFEvernoteNotesTags as evernote_tags_tag_field
		evernote_notes_notebook_name: WFEvernoteNotesNotebookName as evernote_notebook_picker
		evernote_notes_count: WFEvernoteNotesCount as optional stepper with_default 1} returning ordered_list of: note_ref «Notes» requires {
	id: “is.workflow.actions.evernote.get”
	category: “Documents”
	tags: [#search, #tag]
}

shortcut_action get_note_link { «Gets a link to the Evernote note passed into the action, which can be shared.»
		_ as ordered_list of: note_ref
		in_app_link: WFEvernoteShareInAppLink as optional boolean with_default false
		note: WFInput as identifier} returning ordered_list of: URL «Note Link» requires {
	id: “is.workflow.actions.evernote.getlink”
	category: “Documents”
	tags: [#url, #share]
}

shortcut_action create_new_note { «Saves the input as a note in Evernote.»
		_ as ordered_list of: item
		note_title: WFEvernoteNoteTitle as single_line_string
		notebook: WFEvernoteNotebook as evernote_notebook_picker
		tags: WFEvernoteTags as evernote_tags_tag_field
		content: WFInput as identifier} returning note_ref «New Note» requires {
	id: “is.workflow.actions.evernote.new”
	category: “Documents”
	tags: [#make, #save]
}

shortcut_action exit_shortcut { «Stops execution of the current shortcut and dismisses the shortcut on screen. No more actions will be run after this action.»
		_ as ordered_list of: item
		result: WFResult as identifier} returning nothing requires {
	id: “is.workflow.actions.exit”
	category: “Scripting/Control Flow”
	tags: [#quit, #return, #workflow]
}

shortcut_action select_music { «Prompts to select music from your local music library.»
		select_multiple_songs: WFExportSongActionSelectMultiple as boolean} returning ordered_list of: media_item «Music» requires {
	id: “is.workflow.actions.exportsong”
	category: “Media/Music”
	tags: [#export, #song, #music, #itunes, #library]
}

shortcut_action send_via_messenger { «Sends the input via Facebook Messenger»} returning input requires {
	id: “is.workflow.actions.facebook.messenger.send”
	category: “Sharing/Messaging”
	tags: [#messenger, #facebook, #fb, #send, #text, #gif, #image, #video]
}

shortcut_action append_to_file { «Adds the text passed as input to the end of the specified file.»
		_ as string
		service: WFFileStorageService as storage_service_picker
		file_path: WFFilePath as single_line_string
		mode: WFAppendFileWriteMode as optional choice [“Append”, “Prepend”] with_default “Append”
		make_new_line: WFAppendOnNewLine as optional boolean with_default true
		text: WFInput as single_line_string} returning data «Appended File» requires {
	«If no file exists yet at the specified path, a new file will be created. Make sure to include a file extension (usually .txt) at the end of your path.»
	id: “is.workflow.actions.file.append”
	category: “Documents/File Storage”
	tags: [#add, #text, #prepend]
}

shortcut_action create_folder { «Makes a new folder in the specified file storage service.»
		service: WFFileStorageService as storage_service_picker
		path: WFFilePath as single_line_string} returning nothing requires {
	id: “is.workflow.actions.file.createfolder”
	category: “Documents/File Storage”
	tags: [#directory]
}

shortcut_action delete_files { «Delete the files passed in as input.»
		_ as ordered_list of: data
		confirm_before_deleting: WFDeleteFileConfirmDeletion as optional boolean with_default true
		files: WFInput as identifier} returning nothing requires {
	id: “is.workflow.actions.file.delete”
	category: “Documents/File Storage”
	tags: [#delete, #files, #remove, #obliterate]
}

shortcut_action get_link_to_file { «Gets a public link to the file passed into the action.»
		_ as ordered_list of: anything
		file: WFFile as identifier} returning ordered_list of: URL requires {
	id: “is.workflow.actions.file.getlink”
	category: “Documents/File Storage”
	tags: [#url, #share]
}

shortcut_action filter_articles {} returning nothing requires {
	id: “is.workflow.actions.filter.articles”
	category: “Web/Articles”
	tags: []
}

shortcut_action find_calendar_events {} returning nothing requires {
	id: “is.workflow.actions.filter.calendarevents”
	category: “Calendar/Calendar”
	tags: []
}

shortcut_action find_contacts {} returning nothing requires {
	id: “is.workflow.actions.filter.contacts”
	category: “Contacts/Contacts”
	tags: []
}

shortcut_action filter_event_attendees {} returning nothing requires {
	id: “is.workflow.actions.filter.eventattendees”
	category: “Calendar/Event Attendees”
	tags: []
}

shortcut_action filter_files {
		_ as data} returning nothing requires {
	id: “is.workflow.actions.filter.files”
	category: “Documents/Files”
	tags: []
}

shortcut_action find_health_samples {} returning nothing requires {
	«If you only see some but not all of your data in the results, make sure that “Allow Shortcuts to read data” is set to on in the Health app.»
	id: “is.workflow.actions.filter.health.quantity”
	category: “Health/Get”
	tags: []
}

shortcut_action filter_images {
		_ as (photo_media OR image OR av_asset)} returning nothing requires {
	id: “is.workflow.actions.filter.images”
	category: “Media/Images”
	tags: []
}

shortcut_action filter_locations {} returning nothing requires {
	id: “is.workflow.actions.filter.locations”
	category: “Location”
	tags: []
}

shortcut_action find_music {
		_ as (mp_media OR av_asset OR generic_file)} returning nothing requires {
	id: “is.workflow.actions.filter.music”
	category: “Media/Music”
	tags: []
}

shortcut_action find_notes {
		_ as note} returning nothing requires {
	id: “is.workflow.actions.filter.notes”
	category: “Documents/Notes”
	tags: []
}

shortcut_action find_photos {
		_ as (photo_media OR image OR av_asset OR generic_file)} returning nothing requires {
	id: “is.workflow.actions.filter.photos”
	category: “Media/Photos”
	tags: []
}

shortcut_action find_reminders {} returning nothing requires {
	id: “is.workflow.actions.filter.reminders”
	category: “Calendar/Reminders”
	tags: []
}

shortcut_action format_date { «Formats a date and time into text.»
		_ as ordered_list of: date
		date_format: WFDateFormatStyle as optional choice [“None”, “Short”, “Medium”, “Long”, “Relative”, “RFC 2822”, “ISO 8601”, “Custom”] with_default “Short”
		alternate_format: WFRelativeDateFormatStyle as optional choice [“Short”, “Medium”, “Long”] with_default “Medium”
		time_format: WFTimeFormatStyle as optional choice [“None”, “Short”, “Medium”, “Long”, “Relative”] with_default “Short”
		include_iso_8601_time: WFISO8601IncludeTime as boolean
		format_string: WFDateFormat as custom_date_format
		date: WFDate as date} returning ordered_list of: string «Formatted Date» requires {
	«Custom format strings use the format patterns from Unicode Technical Standard #35 (unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_Patterns).»
	id: “is.workflow.actions.format.date”
	category: “Calendar/Dates”
	tags: [#date, #time, #formatter]
}

shortcut_action format_file_size { «Formats a file size into text.»
		_ as ordered_list of: (file_size OR number)
		format: WFFileSizeFormat as optional file_size_picker with_default “Automatic”
		include_units: WFFileSizeIncludeUnits as optional boolean with_default true
		file_size: WFFileSize as integer} returning ordered_list of: string «Formatted File Size» requires {
	«1000 bytes are shown as 1 KB.»
	id: “is.workflow.actions.format.filesize”
	category: “Scripting/Numbers”
	tags: [#byte, #bytes, #megabyte, #megabytes, #count]
}

shortcut_action format_number { «Formats a number into text.»
		_ as ordered_list of: (boolean OR number)
		number: WFNumber as number
		number_format_decimal_places: WFNumberFormatDecimalPlaces as optional stepper with_default 2} returning ordered_list of: string «Formatted Number» requires {
	id: “is.workflow.actions.format.number”
	category: “Scripting/Numbers”
	tags: [#digits, #decimal]
}

shortcut_action generate_qr_code { «Generates a QR code from the input text.»
		_ as ordered_list of: string
		error_correction: WFQRErrorCorrectionLevel as optional choice [“Low”, “Medium”, “Quartile”, “High”] with_default “Medium”
		text: WFText as single_line_string} returning ordered_list of: image «QR Code» requires {
	id: “is.workflow.actions.generatebarcode”
	category: “Documents/QR Codes”
	tags: []
}

shortcut_action get_playlist { «Gets every song in the specified playlist.»
		playlist: WFPlaylistName as playlist_picker} returning ordered_list of: media_item «Playlist» requires {
	id: “is.workflow.actions.get.playlist”
	category: “Media/Playlists”
	tags: [#song, #track]
}

shortcut_action get_article_using_safari_reader { «Gets article details, including body text, author, publish date, and more, from every URL passed into the action.»
		_ as ordered_list of: url
		url: WFWebPage as single_line_string} returning article «Article» requires {
	«Use a Get Details of Article action immediately after this action to get specific details about the article. This action only supports getting one article from each URL.»
	id: “is.workflow.actions.getarticle”
	category: “Web/Articles”
	tags: [#web, #pages, #author, #word, #excerpt, #title, #content, #body, #published, #reader]
}

shortcut_action get_battery_level { «Outputs the percentage of battery remaining as a number from 0 to 100.»} returning decimal_number «Battery Level» requires {
	id: “is.workflow.actions.getbatterylevel”
	category: “Scripting/Device”
	tags: [#remaining, #percentage, #left, #power]
}

shortcut_action get_object_of_class { «Returns a particular object class from the input.»
		_ as ordered_list of: item
		class: Class as optional single_line_string with_default “NSURL”
		input: Input as identifier} returning ordered_list of: item «Object of Class» requires {
	id: “is.workflow.actions.getclassaction”
	category: “Scripting/Content”
	tags: []
}

shortcut_action get_clipboard { «Passes the contents of the clipboard to the next action.»} returning ordered_list of: item «Clipboard» requires {
	id: “is.workflow.actions.getclipboard”
	category: “Sharing/Clipboard”
	tags: [#text, #clipboard, #copy, #paste, #contents, #of]
}

shortcut_action get_current_location { «Gets the current location of the device.»} returning location «Current Location» requires {
	id: “is.workflow.actions.getcurrentlocation”
	category: “Location”
	tags: [#gps, #map, #place, #address]
}

shortcut_action get_current_song { «Returns the song that is currently playing in the Music app, if any.»} returning media_item «Current Song» requires {
	id: “is.workflow.actions.getcurrentsong”
	category: “Media/Music”
	tags: [#current, #song, #ipod, #track, #music, #itunes, #library, #listening, #playing]
}

shortcut_action get_device_details { «Gets information about the current device.»
		get: WFDeviceDetail as optional choice [“Device Name”, “Device Model”, “System Version”, “Screen Width”, “Screen Height”, “Current Volume”, “Current Brightness”] with_default “Device Name”} returning (string OR number) «Device Details» requires {
	id: “is.workflow.actions.getdevicedetails”
	category: “Scripting/Device”
	tags: [#name, #model, #screen, #dimensions, #version, #system, #os, #ios, #software, #current, #brightness, #volume, #firmware]
}

shortcut_action show_directions { «Open directions to the location passed into this action in your choice of Maps, Google Maps, Citymapper, Transit, or Waze. For example, you can use this action to get directions to an upcoming event on your calendar.»
		location: WFLocation as location
		destination: WFDestination as location
		app: WFGetDirectionsActionApp as optional maps_app_picker with_default “Maps”
		mode: WFGetDirectionsActionMode as optional dynamic_choice with_default “Driving”} returning input requires {
	id: “is.workflow.actions.getdirections”
	category: “Location/Maps”
	tags: [#get, #maps, #search, #query, #place, #location, #find, #waze, #google, #transit, #citymapper]
}

shortcut_action get_distance { «Calculates the distance to the location passed into this action.»
		_ as (string OR location OR map_item)
		start_location: WFGetDirectionsCustomLocation as location
		end_location: WFGetDistanceDestination as location
		route_type: WFGetDirectionsActionMode as optional choice [“Direct”, “Driving”, “Walking”] with_default “Direct”
		unit: WFDistanceUnit as get_distance_unit_picker} returning number «Distance» requires {
	id: “is.workflow.actions.getdistance”
	category: “Location/Routing”
	tags: [#maps, #directions, #calculate]
}

shortcut_action get_episodes_of_podcast { «Returns a list of episodes from a podcast show.»
		_ as podcast_show
		podcast: WFInput as podcast_picker} returning ordered_list of: podcast_episode «Episodes» requires {
	id: “is.workflow.actions.getepisodesforpodcast”
	category: “Media”
	tags: [#episodes, #podcast, #show, #library]
}

shortcut_action get_frames_from_image { «Splits an animated GIF or a photo burst into individual frames.»
		_ as gif_image
		image: WFImage as identifier} returning ordered_list of: (image OR photo_media) «Frames from Image» requires {
	id: “is.workflow.actions.getframesfromimage”
	category: “Media/GIFs”
	tags: [#animated, #gif, #burst, #split, #individual, #explode, #separate]
}

shortcut_action get_halfway_point { «Gets the halfway point between two locations.»
		first_location: WFGetHalfwayPointFirstLocation as location
		second_location: WFGetHalfwayPointSecondLocation as location} returning location «Halfway Point» requires {
	id: “is.workflow.actions.gethalfwaypoint”
	category: “Location/Routing”
	tags: [#location, #maps, #two, #places]
}

shortcut_action home { «Gets the state of a Home accessory.»
		accessory_state: WFHMService as home_service_picker but_not [variable]
		characteristic: WFHMCharacteristic as home_characteristic_picker but_not [variable]} returning nothing «Accessory State» requires {
	id: “is.workflow.actions.gethomeaccessorystate”
	category: “Home”
	tags: [#homekit, #accessories, #accessory, #automation, #smart, #house, #scene]
}

shortcut_action make_html_from_rich_text { «Converts the rich text passed as input to HTML text.»
		_ as rich_text
		make_full_document: WFMakeFullDocument as boolean
		rich_text: WFInput as identifier} returning string «HTML from Rich Text» requires {
	id: “is.workflow.actions.gethtmlfromrichtext”
	category: “Documents/Rich Text”
	tags: [#page, #source, #web, #get]
}

shortcut_action get_current_ip_address { «Returns the local or external IP address of the device.»
		address: WFIPAddressSourceOption as optional choice [“External”, “Local”] with_default “External”
		type: WFIPAddressTypeOption as optional choice [“IPv4”, “IPv6”] with_default “IPv4”} returning string «Current IP Address» requires {
	id: “is.workflow.actions.getipaddress”
	category: “Scripting/Network”
	tags: [#network, #local, #external, #cellular, #wi_fi, #wifi]
}

shortcut_action get_item_from_list { «Returns one or more items from the list passed as input. You can get the first item, the last item, a random item, the item at a particular index, or items in a range of indexes.»
		_ as ordered_list of: item
		get: WFItemSpecifier as optional choice [“First Item”, “Last Item”, “Random Item”, “Item At Index”, “Items in Range”] with_default “First Item” but_not [variable]
		index: WFItemIndex as integer
		start_index: WFItemRangeStart as integer
		end_index: WFItemRangeEnd as integer
		list: WFInput as identifier} returning ordered_list of: item «Item from List» requires {
	«Lists use one-based indexing, so the first item is at index 1, the second is at index 2, etc.»
	id: “is.workflow.actions.getitemfromlist”
	category: “Scripting/Lists”
	tags: []
}

shortcut_action get_name { «Returns the name of every item passed as input. Depending on the input, this could be a file name, the title of a website, the title of a calendar event, etc.»
		_ as ordered_list of: item
		item: WFInput as identifier} returning ordered_list of: string «Name» requires {
	id: “is.workflow.actions.getitemname”
	category: “Scripting/Items”
	tags: [#title]
}

shortcut_action get_type { «Returns the type of every item passed as input. For example, if a URL is passed, this action will return “URL”.»
		_ as ordered_list of: item
		item: WFInput as identifier} returning ordered_list of: string «Type» requires {
	id: “is.workflow.actions.getitemtype”
	category: “Scripting/Items”
	tags: [#content, #item, #class]
}

shortcut_action get_latest_photos { «Gets the most recent photos from the photo library.»
		get_latest_photo_count: WFGetLatestPhotoCount as optional stepper with_default 1
		get_latest_photos_action_include_screenshots: WFGetLatestPhotosActionIncludeScreenshots as optional boolean with_default true} returning ordered_list of: photo «Latest Photos» requires {
	id: “is.workflow.actions.getlastphoto”
	category: “Media/Photos”
	tags: [#camera, #roll, #picture, #last]
}

shortcut_action get_latest_screenshots { «Gets the most recent screenshots from the photo library.»
		get_latest_photo_count: WFGetLatestPhotoCount as optional stepper with_default 1} returning ordered_list of: photo «Latest Screenshots» requires {
	id: “is.workflow.actions.getlastscreenshot”
	category: “Media/Photos”
	tags: [#camera, #roll, #picture, #photo, #screen]
}

shortcut_action get_latest_videos { «Gets the most recent videos from the photo library.»
		get_latest_photo_count: WFGetLatestPhotoCount as optional stepper with_default 1} returning ordered_list of: photo «Latest Videos» requires {
	id: “is.workflow.actions.getlastvideo”
	category: “Media/Photos”
	tags: [#video, #camera, #roll, #movie]
}

shortcut_action get_latest_bursts { «Gets the most recent burst photos from the photo library.»
		get_latest_photo_count: WFGetLatestPhotoCount as optional stepper with_default 1} returning ordered_list of: photo «Latest Bursts» requires {
	id: “is.workflow.actions.getlatestbursts”
	category: “Media/Photos”
	tags: [#camera, #roll, #picture, #photo, #animated]
}

shortcut_action get_latest_live_photos { «Gets the most recent Live Photos from the photo library.»
		get_latest_photo_count: WFGetLatestPhotoCount as optional stepper with_default 1} returning ordered_list of: photo «Latest Live Photos» requires {
	id: “is.workflow.actions.getlatestlivephotos”
	category: “Media/Photos”
	tags: [#camera, #roll, #picture, #photo, #animated]
}

shortcut_action get_last_import { «Gets the most recent photo import from the Photos app.»} returning ordered_list of: photo «Imported Photos» requires {
	id: “is.workflow.actions.getlatestphotoimport”
	category: “Media/Photos”
	tags: [#camera, #roll, #picture, #photo, #import, #camera, #sd, #card, #usb]
}

shortcut_action get_maps_url { «Creates a URL to search for the location, place, or text that was passed into the action in a separate maps app.»
		_ as ordered_list of: (string OR location OR map_item)
		location: WFInput as identifier} returning ordered_list of: URL «Maps URL» requires {
	id: “is.workflow.actions.getmapslink”
	category: “Location”
	tags: [#link, #location, #app]
}

shortcut_action make_markdown_from_rich_text { «Converts the rich text passed as input to Markdown text (comparable to Aaron Swartz's html2text script).»
		_ as rich_text
		rich_text: WFInput as identifier} returning string «Markdown from Rich Text» requires {
	id: “is.workflow.actions.getmarkdownfromrichtext”
	category: “Documents/Rich Text”
	tags: [#‘html2text’, #source]
}

shortcut_action get_my_shortcuts { «Gets the shortcuts stored on this device.»} returning ordered_list of: workflow_reference «My Shortcuts» requires {
	id: “is.workflow.actions.getmyworkflows”
	category: “Scripting/Shortcuts”
	tags: [#installed, #downloaded, #workflow]
}

shortcut_action get_name_of_emoji { «Gets the names of emoji passed into the action.»
		_ as string
		text: WFInput as single_line_string} returning ordered_list of: string «Name of Emoji» requires {
	id: “is.workflow.actions.getnameofemoji”
	category: “Documents/Text”
	tags: []
}

shortcut_action get_podcasts_from_library { «Gets a list of all shows in your Podcast library.»} returning ordered_list of: podcast_show «Podcasts» requires {
	id: “is.workflow.actions.getpodcastsfromlibrary”
	category: “Media”
	tags: [#podcast, #show, #library]
}

shortcut_action make_rich_text_from_html { «Takes the inputted HTML and turns it into rich text, which can then be converted to other formats.»
		_ as string
		html: WFHTML as identifier} returning HTML «Rich Text from HTML» requires {
	id: “is.workflow.actions.getrichtextfromhtml”
	category: “Documents/Rich Text”
	tags: [#page, #source, #web, #get]
}

shortcut_action make_rich_text_from_markdown { «Takes the inputted Markdown and turns it into rich text, which can then be converted to other formats.»
		_ as string
		markdown_text: WFInput as identifier} returning HTML «Rich Text from Markdown» requires {
	id: “is.workflow.actions.getrichtextfrommarkdown”
	category: “Documents/Rich Text”
	tags: [#html, #get]
}

shortcut_action text { «Passes the specified text to the next action.»
		text_action_text: WFTextActionText as optional string with_default “”} returning string «Text» requires {
	id: “is.workflow.actions.gettext”
	category: “Documents/Text”
	tags: [#text, #such_text, #very_speech, #much_words, #so_wow, #string]
}

shortcut_action get_time_between_dates { «Subtracts the specified date from the date passed into the action. For example, this action could get the number of minutes from now until a calendar event passed in as input.»
		_ as date
		first_date: WFTimeUntilFromDate as date
		second_date: WFInput as date
		in: WFTimeUntilUnit as optional choice [“Total Time”, “Seconds”, “Minutes”, “Hours”, “Days”, “Weeks”, “Months”, “Years”] with_default “Minutes”} returning number «Time Between Dates» requires {
	«This action outputs a negative number if the input date takes place before the specified date.»
	id: “is.workflow.actions.gettimebetweendates”
	category: “Calendar/Dates”
	tags: [#between, #after, #before, #seconds, #minutes, #hours, #days, #weeks, #years, #math, #calculate, #interval]
}

shortcut_action get_travel_time { «Estimates the amount of time it will take to travel to the location passed into this action.»
		_ as (string OR location OR map_item)
		start_location: WFGetDirectionsCustomLocation as location
		end_location: WFDestination as location
		mode: WFGetDirectionsActionMode as optional choice [“Driving”, “Walking”, “Transit”] with_default “Driving”} returning trip_info «Travel Time» requires {
	«Travel times are provided by Apple Maps and take into account current traffic conditions.»
	id: “is.workflow.actions.gettraveltime”
	category: “Location/Routing”
	tags: [#maps, #directions, #calculate, #estimated, #arrival, #eta, #driving, #walking, #transit]
}

shortcut_action get_file_of_type { «Returns a particular file type from the input.»
		_ as ordered_list of: item
		type: WFFileType as optional single_line_string with_default “public.rtf”
		input: WFInput as identifier} returning ordered_list of: data «File of Type» requires {
	id: “is.workflow.actions.gettypeaction”
	category: “Scripting/Content”
	tags: []
}

shortcut_action get_upcoming_events { «Gets upcoming calendar events, ordered from nearest to farthest away in time.»
		get_upcoming_item_calendar: WFGetUpcomingItemCalendar as calendar_picker
		get_upcoming_item_count: WFGetUpcomingItemCount as optional stepper with_default 1
		date_specifier: WFDateSpecifier as optional choice [“Any Day”, “Today”, “Tomorrow”, “Specified Day”] with_default “Any Day”
		specified_date: WFSpecifiedDate as date} returning ordered_list of: event «Upcoming Events» requires {
	id: “is.workflow.actions.getupcomingevents”
	category: “Calendar/Calendar”
	tags: [#calendar, #event, #events, #next, #upcoming]
}

shortcut_action get_upcoming_reminders { «Gets upcoming reminders, ordered from nearest to farthest away due date.»
		get_upcoming_item_calendar: WFGetUpcomingItemCalendar as reminders_list_picker
		get_upcoming_item_count: WFGetUpcomingItemCount as optional stepper with_default 1} returning ordered_list of: reminder «Upcoming Reminders» requires {
	id: “is.workflow.actions.getupcomingreminders”
	category: “Calendar/Reminders”
	tags: [#calendar, #reminder, #next, #upcoming]
}

shortcut_action get_component_of_url { «Gets the specified part of the URL passed into the action.»
		_ as url
		url: WFURL as single_line_string
		component: WFURLComponent as optional choice [“Scheme”, “User”, “Password”, “Host”, “Port”, “Path”, “Query”, “Fragment”] with_default “Scheme”} returning string «Component of URL» requires {
	«URLs are structured as follows: scheme://user:password@host:port/path?query#fragment»
	id: “is.workflow.actions.geturlcomponent”
	category: “Web/URLs”
	tags: [#scheme, #user, #password, #host, #port, #path, #query, #fragment]
}

shortcut_action get_dictionary_value { «Gets the value for the specified key in the dictionary passed into the action. »
		_ as keyed_list
		get: WFGetDictionaryValueType as optional choice [“Value”, “All Keys”, “All Values”] with_default “Value” but_not [ask, variable]
		key: WFDictionaryKey as single_line_string
		dictionary: WFInput as identifier} returning ordered_list of: (string OR number OR date OR keyed_list OR boolean) «Dictionary Value» requires {
	«You can reference values deep inside of a dictionary by providing multiple keys separated by dots. For example, to get the value "soup" from the dictionary {"beverages": [{"favorite": "soup"}]}, you can specify the key path "beverages.1.favorite".»
	id: “is.workflow.actions.getvalueforkey”
	category: “Scripting/Dictionaries”
	tags: [#json, #plist, #xml, #urlencoded, #query, #string, #for, #key]
}

shortcut_action get_variable { «Gets the value of the specified variable and passes it to the next action.»
		variable: WFVariable as identifier but_not [clipboard]} returning ordered_list of: item «Variable» requires {
	id: “is.workflow.actions.getvariable”
	category: “Scripting/Variables”
	tags: [#programming, #scripting, #var]
}

shortcut_action get_contents_of_web_page { «Extracts the contents of the web pages passed into the action.»
		_ as ordered_list of: url
		url: WFInput as single_line_string} returning ordered_list of: attributed_string «Contents of Web Page» requires {
	id: “is.workflow.actions.getwebpagecontents”
	category: “Web/Web Requests”
	tags: []
}

shortcut_action get_network_details { «Gets information about the currently connected networks.»
		network_details_network: WFNetworkDetailsNetwork as network_picker
		wi_fi_detail: WFWiFiDetail as optional choice [“Network Name”, “BSSID”] with_default “Network Name”
		cellular_detail: WFCellularDetail as optional choice [“Carrier Name”, “Radio Technology”, “Country Code”] with_default “Carrier Name”} returning string «Network Details» requires {
	id: “is.workflow.actions.getwifi”
	category: “Scripting/Network”
	tags: [#wifi, #wi_fi, #mac, #address, #name, #technology, #code, #radio, #country, #carrier, #cellular, #wlan]
}

shortcut_action search_giphy { «Searches for GIFs representing the text specified using Giphy.»
		giphy_query: WFGiphyQuery as single_line_string
		giphy_show_picker: WFGiphyShowPicker as optional boolean with_default true
		giphy_limit: WFGiphyLimit as optional stepper with_default 1
		giphy_select_multiple: WFGiphySelectMultiple as boolean} returning ordered_list of: giphy_object «GIFs» requires {
	«Powered by Giphy (giphy.com)»
	id: “is.workflow.actions.giphy”
	category: “Web/Giphy”
	tags: [#gif]
}

shortcut_action open_in_goodreader { «Opens a file in GoodReader.»
		file: WFInput as identifier} returning input requires {
	id: “is.workflow.actions.goodreader.open”
	category: “Documents”
	tags: [#save, #file, #document]
}

shortcut_action continue_in_shortcuts_app { «Switches into the Shortcuts app and continues to the next action.»} returning input requires {
	id: “is.workflow.actions.handoff”
	category: “Scripting/Control Flow”
	tags: [#apple, #watch, #send, #phone, #transfer, #switch, #handoff, #continuity, #workflow]
}

shortcut_action hand_off_playback { «Hands off Music or Podcasts playback between two devices.»
		source: WFSourceMediaRoute as media_route_picker but_not [variable]
		destination: WFDestinationMediaRoute as media_route_picker but_not [variable]} returning nothing requires {
	id: “is.workflow.actions.handoffplayback”
	category: “Media/Playback”
	tags: [#device, #airplay, #playback, #audio, #route]
}

shortcut_action generate_hash { «Generates a MD5/SHA1 hash from the input.»
		_ as ordered_list of: generic_file
		type: WFHashType as optional choice [“MD5”, “SHA1”, “SHA256”, “SHA512”] with_default “MD5”
		input: WFInput as identifier} returning ordered_list of: string «Hash» requires {
	id: “is.workflow.actions.hash”
	category: “Scripting/Files”
	tags: [#crypto]
}

shortcut_action log_health_sample { «Adds a data point into the Health app. You can log anything that the Health app supports, including your weight, steps taken, running distance, caloric intake and more.»
		quantity_sample_type: WFQuantitySampleType as quantity_type_picker but_not [variable]
		quantity_sample_quantity: WFQuantitySampleQuantity as health_quantity_field
		quantity_sample_additional_quantity: WFQuantitySampleAdditionalQuantity as health_quantity_additional_field
		quantity_sample_additional_enumeration: WFQuantitySampleAdditionalEnumeration as health_quantity_additional_picker but_not [variable]
		category_sample_enumeration: WFCategorySampleEnumeration as health_category_picker but_not [variable]
		category_sample_additional_enumeration_key: WFCategorySampleAdditionalEnumerationKey as health_category_additional_picker but_not [variable]
		quantity_sample_date: WFQuantitySampleDate as health_action_start_date_field
		sample_end_date: WFSampleEndDate as health_action_end_date_field} returning hk_sample «Health Sample» requires {
	id: “is.workflow.actions.health.quantity.log”
	category: “Health/Log”
	tags: [#health, #quantity, #steps, #weight, #fitness]
}

shortcut_action log_workout { «Adds a workout into the Health app. You can log all kinds of activities, from running and cycling to playing a sport.»
		type: WFWorkoutReadableActivityType as workout_type_picker
		date: WFWorkoutDate as date
		duration: WFWorkoutDuration as duration_quantity_field
		calories: WFWorkoutCaloriesQuantity as health_quantity_field
		distance: WFWorkoutDistanceQuantity as health_quantity_field} returning hk_workout «Workout» requires {
	id: “is.workflow.actions.health.workout.log”
	category: “Health/Log”
	tags: [#health, #workout, #sport, #fitness, #activity]
}

shortcut_action home { «Sets a Home accessory.»
		scenes_and_accessories: WFHomeTriggerActionSets as home_accessory_picker but_not [variable]} returning input requires {
	id: “is.workflow.actions.homeaccessory”
	category: “Home”
	tags: [#homekit, #accessories, #accessory, #automation, #smart, #house]
}

shortcut_action combine_images { «Combines the images passed into the action horizontally, vertically, or in a grid.»
		_ as ordered_list of: image
		mode: WFImageCombineMode as optional choice [“Horizontally”, “Vertically”, “In a Grid”] with_default “Horizontally”
		spacing: WFImageCombineSpacing as optional number with_default 0
		images: WFInput as identifier} returning image «Combined Image» requires {
	id: “is.workflow.actions.image.combine”
	category: “Media/Image Editing”
	tags: [#horizontal, #vertical, #compile, #connect, #montage, #photos]
}

shortcut_action convert_image { «Converts the images passed into the action to the specified image format.»
		_ as ordered_list of: image
		format: WFImageFormat as optional image_convert_format_picker with_default “JPEG”
		quality: WFImageCompressionQuality as optional slider with_default 0.75
		preserve_metadata: WFImagePreserveMetadata as optional boolean with_default true
		image: WFInput as identifier} returning image «Converted Image» requires {
	id: “is.workflow.actions.image.convert”
	category: “Media/Images”
	tags: [#jpeg, #jpg, #png, #bmp, #tiff, #strip, #remove, #preserve, #metadata]
}

shortcut_action crop_image { «Crops images to a smaller rectangle.»
		_ as ordered_list of: image
		image: WFInput as identifier
		position: WFImageCropPosition as optional choice [“Center”, “Top Left”, “Top Right”, “Bottom Left”, “Bottom Right”, “Custom”] with_default “Center”
		x_coordinate: WFImageCropX as integer
		y_coordinate: WFImageCropY as integer
		width: WFImageCropWidth as optional integer with_default 100
		height: WFImageCropHeight as optional integer with_default 100} returning ordered_list of: image «Cropped Image» requires {
	id: “is.workflow.actions.image.crop”
	category: “Media/Image Editing”
	tags: [#transform, #shrink, #stretch, #expand, #rectangle, #clip, #canvas]
}

shortcut_action flip_image { «Reverses the direction of images either horizontally or vertically.»
		_ as ordered_list of: image
		direction: WFImageFlipDirection as optional flip_image_direction_picker with_default “Horizontal”
		image: WFInput as identifier} returning ordered_list of: image «Flipped Image» requires {
	id: “is.workflow.actions.image.flip”
	category: “Media/Image Editing”
	tags: [#portrait, #landscape, #horizontal, #vertical]
}

shortcut_action mask_image { «Applies a mask to each image passed into the action. For example, you can cut images into a rounded rectangle, ellipse or icon shape, or provide a custom alpha mask.»
		_ as ordered_list of: image
		image: WFInput as identifier
		type: WFMaskType as optional choice [“Rounded Rectangle”, “Ellipse”, “Icon”, “Custom Image”] with_default “Rounded Rectangle” but_not [ask, variable]
		corner_radius: WFMaskCornerRadius as integer
		custom_image: WFCustomMaskImage as identifier} returning ordered_list of: image «Masked Image» requires {
	id: “is.workflow.actions.image.mask”
	category: “Media/Image Editing”
	tags: [#photos, #transform, #overlay, #clip, #corner, #radius]
}

shortcut_action resize_image { «Scales images to a particular width and height.»
		_ as ordered_list of: image
		width: WFImageResizeWidth as optional integer with_default 640
		height: WFImageResizeHeight as integer
		image: WFImage as identifier} returning ordered_list of: image «Resized Image» requires {
	«If the width or height is not set, that dimension is automatically calculated to maintain the original image's aspect ratio.»
	id: “is.workflow.actions.image.resize”
	category: “Media/Image Editing”
	tags: [#scale, #transform, #shrink, #stretch, #expand, #width, #height]
}

shortcut_action rotate_image { «Turns an image clockwise by a particular number of degrees.»
		_ as ordered_list of: image
		degrees: WFImageRotateAmount as optional number with_default 90
		image: WFImage as identifier} returning ordered_list of: image «Rotated Image» requires {
	id: “is.workflow.actions.image.rotate”
	category: “Media/Image Editing”
	tags: [#portrait, #landscape, #degrees, #rotation, #orientation]
}

shortcut_action upload_to_imgur { «Uploads the input to Imgur.»
		_ as ordered_list of: image
		images: WFInput as identifier
		upload_anonymously: WFImgurAnonymous as optional boolean with_default true
		direct_link: WFImgurDirectLink as boolean
		create_album: WFImgurAlbum as optional boolean with_default false
		album_layout: WFImgurAlbumLayout as optional choice [“Blog”, “Grid”, “Horizontal”, “Vertical”] with_default “Blog”
		album_privacy: WFImgurAlbumPrivacy as optional choice [“Public”, “Hidden”, “Secret”] with_default “Hidden”
		title: WFImgurTitle as single_line_string
		description: WFImgurDescription as string} returning ordered_list of: URL «Imgur URLs» requires {
	«Powered by Imgur (imgur.com)»
	id: “is.workflow.actions.imgur.upload”
	category: “Media”
	tags: [#image, #reddit, #album, #photo]
}

shortcut_action add_to_instapaper { «Adds the input to Instapaper.»
		folder: WFInstapaperFolder as dynamic_choice
		url: WFInputURL as single_line_string} returning input requires {
	id: “is.workflow.actions.instapaper.add”
	category: “Web”
	tags: []
}

shortcut_action get_instapaper_bookmarks { «Gets the contents of a folder in Instapaper. Requires Instapaper Premium.»
		instapaper_folder: WFInstapaperFolder as dynamic_choice
		bookmark_count: WFBookmarkCount as optional stepper with_default 5} returning ordered_list of: url «Instapaper Bookmarks» requires {
	id: “is.workflow.actions.instapaper.get”
	category: “Web”
	tags: []
}

shortcut_action import_to_lightroom { «Imports the photos passed as input into Lightroom»
		apply_preset: applyPreset as optional boolean with_default false
		preset_group: presetGroup as optional choice [“B&W”, “Color”, “Creative”, “Curve”, “Grain”, “Sharpening”, “Vignetting”] with_default “Color” but_not [variable]
		preset: preset as lightroom_preset_picker
		photos: WFInput as identifier} returning input requires {
	id: “is.workflow.actions.lightroom.import”
	category: “Media”
	tags: []
}

shortcut_action list { «Allows you to specify a list of items to be passed to the next action.»
		items: WFItems as optional ordered_list with_default [“One”, “Two”]} returning ordered_list of: item «List» requires {
	«If you specify a variable, the contents of that variable will be included in the list.»
	id: “is.workflow.actions.list”
	category: “Scripting/Lists”
	tags: [#array]
}

shortcut_action location { «Passes the specified location to the next action.»
		location: WFLocation as location} returning location «Location» requires {
	id: “is.workflow.actions.location”
	category: “Location”
	tags: [#maps, #search, #query, #place, #location, #find]
}

shortcut_action make_gif { «Creates an animated GIF from the images or video passed into the action.»
		_ as ordered_list of: (image OR MPEG_4)
		makegif_action_delay_time: WFMakeGIFActionDelayTime as optional number with_default 0.2
		makegif_action_loop_enabled: WFMakeGIFActionLoopEnabled as optional boolean with_default true
		makegif_action_loop_count: WFMakeGIFActionLoopCount as stepper
		makegif_action_auto_size: WFMakeGIFActionAutoSize as optional boolean with_default true
		makegif_action_manual_size_width: WFMakeGIFActionManualSizeWidth as integer
		makegif_action_manual_size_height: WFMakeGIFActionManualSizeHeight as integer
		input: WFInput as identifier} returning gif_image «GIF» requires {
	id: “is.workflow.actions.makegif”
	category: “Media/GIFs”
	tags: [#animate, #make, #generate, #gif]
}

shortcut_action make_pdf { «Makes a PDF out of the input. The resulting PDF can optionally include a quarter-inch margin for better printing.»
		_ as ordered_list of: item
		include_margin: WFPDFIncludeMargin as optional boolean with_default false
		include: WFPDFIncludedPages as optional choice [“All Pages”, “Single Page”, “Page Range”] with_default “All Pages”
		‘page_#’: WFPDFSinglePage as number
		‘start_page_#’: WFPDFPageRangeStart as number
		‘end_page_#’: WFPDFPageRangeEnd as number
		input: WFInput as identifier} returning pdf «PDF» requires {
	id: “is.workflow.actions.makepdf”
	category: “Documents/Printing”
	tags: [#make, #generate, #pdf, #print]
}

shortcut_action make_video_from_gif { «Converts an animated GIF into a video.»
		_ as gif_image
		make_video_fromgif_action_loop_count: WFMakeVideoFromGIFActionLoopCount as optional stepper with_default 1
		inputgif: WFInputGIF as identifier} returning MPEG_4 «Video» requires {
	id: “is.workflow.actions.makevideofromgif”
	category: “Media/GIFs”
	tags: [#video, #gif, #convert, #make]
}

shortcut_action make_archive { «Makes an archive out of the files passed as input. Supports creating zip, tar.gz, tar.bz2, tar.xz, tar, gzip, cpio, or iso archives.»
		_ as ordered_list of: item
		archive_name: WFZIPName as single_line_string
		format: WFArchiveFormat as archive_format
		input: WFInput as identifier} returning generic_file «Archive» requires {
	id: “is.workflow.actions.makezip”
	category: “Documents/Archives”
	tags: [#make, #generate, #gzip]
}

shortcut_action calculate { «Performs a number operation on the input and returns the result.»
		_ as decimal_number
		input: WFInput as number
		math_operation: WFMathOperation as optional choice [“+”, “-”, “×”, “÷”, “…”] with_default “+”
		scientific_math_operation: WFScientificMathOperation as choice [“Modulus”, “x^2”, “x^3”, “x^y”, “e^x”, “10^x”, “ln(x)”, “log(x)”, “√x”, “∛x”, “x!”, “sin(x)”, “cos(x)”, “tan(x)”, “abs(x)”]
		math_operand: WFMathOperand as number
		scientific_math_operand: WFScientificMathOperand as number} returning decimal_number «Calculation Result» requires {
	id: “is.workflow.actions.math”
	category: “Scripting/Math”
	tags: [#scientific, #math, #calculator, #number, #add, #addition, #subtract, #subtraction, #multiply, #multiplication, #times, #divide, #division, #modulus, #square, #squared, #exponent, #exponential, #power, #‘^’, #ln, #log, #logarithm, #root, #sin, #cos, #tan, #sine, #cosine, #tangent, #trig, #abs, #absolute, #value, #factorial]
}

shortcut_action convert_measurement { «Converts the measurements passed into the action to the specified unit.»
		_ as measurement
		type: WFMeasurementUnitType as optional unit_type_picker with_default “Length” but_not [variable]
		unit: WFMeasurementUnit as measurement_unit_picker
		measurement: WFInput as identifier} returning measurement «Converted Measurement» requires {
	id: “is.workflow.actions.measurement.convert”
	category: “Scripting/Measurements”
	tags: [#degrees, #distance, #pressure, #measure, #speed, #weather]
}

shortcut_action measurement { «Passes the specified measurement (including number and unit) to the next action.»
		type: WFMeasurementUnitType as optional unit_type_picker with_default “Length” but_not [variable]
		value: WFMeasurementUnit as unit_quantity_field} returning measurement «Measurement» requires {
	id: “is.workflow.actions.measurement.create”
	category: “Scripting/Measurements”
	tags: [#degrees, #distance, #pressure, #measure, #speed, #weather]
}

shortcut_action _nothing { «This action does nothing and produces no output. It is useful to separate blocks of actions, or to ensure that no input is passed to the next action.»} returning nothing requires {
	id: “is.workflow.actions.nothing”
	category: “Scripting/No-ops”
	tags: [#nil, #nothing, #empty, #discard, #clear]
}

shortcut_action show_notification { «Displays a local notification.»
		title: WFNotificationActionTitle as single_line_string but_not [ask]
		body: WFNotificationActionBody as optional string with_default “Hello World” but_not [ask]
		play_sound: WFNotificationActionSound as optional boolean with_default true
		attachment: WFInput as identifier} returning input requires {
	id: “is.workflow.actions.notification”
	category: “Scripting/Notification”
	tags: [#local, #notification, #show, #alert, #reminder, #push]
}

shortcut_action number { «Passes a number to the next action.»
		number: WFNumberActionNumber as number} returning decimal_number «Number» requires {
	id: “is.workflow.actions.number”
	category: “Scripting/Numbers”
	tags: [#decimal, #math]
}

shortcut_action random_number { «Passes a random number between the given minimum and maximum to the next action. The minimum and maximum numbers are included as possible results.»
		minimum: WFRandomNumberMinimum as number
		maximum: WFRandomNumberMaximum as number} returning decimal_number «Random Number» requires {
	id: “is.workflow.actions.number.random”
	category: “Scripting/Numbers”
	tags: [#decimal, #math, #generate, #generator]
}

shortcut_action open_app { «Opens the specified app.»
		app_identifier: WFAppIdentifier as app_picker
		app_name: WFAppName as hidden_parameter {single_line_string}} returning input requires {
	id: “is.workflow.actions.openapp”
	category: “Scripting/Apps”
	tags: [#launch, #run, #switch]
}

shortcut_action ‘open_in...’ { «Opens the input as a file in the specified app.»
		open_in_ask_when_run: WFOpenInAskWhenRun as optional boolean with_default true
		open_in_app_identifier: WFOpenInAppIdentifier as app_picker
		app_name: WFAppName as hidden_parameter {single_line_string}
		input: WFInput as identifier} returning input requires {
	id: “is.workflow.actions.openin”
	category: “Documents/Files”
	tags: [#open, #file, #document, #in, #app, #application, #uidocumentinteractioncontroller]
}

shortcut_action open_urls { «Opens URLs passed into the action in Safari.»
		url: WFInput as single_line_string} returning input requires {
	id: “is.workflow.actions.openurl”
	category: “Web/Safari”
	tags: [#url, #web, #display, #site, #open, #show, #multiple]
}

shortcut_action open_x_callback_url { «Performs the specified x-callback-url action. The x-success, x-cancel, and x-error parameters will be added automatically.»
		_ as url
		custom_callback: WFXCallbackCustomCallbackEnabled as boolean
		success_key: WFXCallbackCustomSuccessKey as optional single_line_string with_default “x-success”
		cancel_key: WFXCallbackCustomCancelKey as single_line_string
		error_key: WFXCallbackCustomErrorKey as single_line_string
		custom_x_success_url: WFXCallbackCustomSuccessURLEnabled as boolean
		x_success_url: WFXCallbackCustomSuccessURL as optional single_line_string with_default “shortcuts://callback”
		x_callback_url: WFXCallbackURL as single_line_string} returning (string OR keyed_list) «X-Callback Result» requires {
	id: “is.workflow.actions.openxcallbackurl”
	category: “Scripting/X-Callback”
	tags: [#xcallback]
}

shortcut_action overlay_image { «Overlays an image on top of another image.»
		_ as ordered_list of: image
		image: WFImage as identifier
		input: WFInput as identifier
		should_show_image_editor: WFShouldShowImageEditor as optional boolean with_default true
		image_position: WFImagePosition as optional choice [“Center”, “Top Left”, “Top Right”, “Bottom Left”, “Bottom Right”, “Custom”] with_default “Center”
		image_width: WFImageWidth as integer
		image_height: WFImageHeight as integer
		imagex: WFImageX as number
		imagey: WFImageY as number
		rotation: WFRotation as optional number with_default 0
		overlay_image_opacity: WFOverlayImageOpacity as optional integer with_default 100} returning ordered_list of: image «Overlaid Image» requires {
	id: “is.workflow.actions.overlayimageonimage”
	category: “Media/Image Editing”
	tags: [#picture, #edit, #editor]
}

shortcut_action ‘play/pause’ { «Plays or pauses the currently playing media.»
		play_pause_behavior: WFPlayPauseBehavior as optional choice [“Play/Pause”, “Play”, “Pause”] with_default “Play/Pause”
		media_route: WFMediaRoute as optional media_route_picker with_default “Local” but_not [variable]} returning input requires {
	id: “is.workflow.actions.pausemusic”
	category: “Media/Playback”
	tags: [#pause, #play, #song, #podcast, #ipod, #track, #music, #itunes]
}

shortcut_action phone_number { «Passes the specified phone numbers to the next action.»
		phone_number: WFPhoneNumber as phone_number_field} returning ordered_list of: phone_number «Phone Number» requires {
	id: “is.workflow.actions.phonenumber”
	category: “Contacts/Phone”
	tags: [#phone, #number, #mobile, #home, #cellular, #telephone]
}

shortcut_action add_to_pinboard { «Adds the URL passed into the action to your Pinboard.»
		title: WFPinTitle as single_line_string
		tags: WFPinTags as single_line_string
		public: WFPinPublic as optional boolean with_default true
		unread: WFPinUnread as optional boolean with_default true
		description: WFPinDescription as string
		url: WFPinboardURL as single_line_string} returning input requires {
	id: “is.workflow.actions.pinboard.add”
	category: “Web”
	tags: [#url, #web, #later, #save, #pinboard]
}

shortcut_action get_pinboard_bookmarks { «Gets bookmarks in your Pinboard account.»
		pin_tags: WFPinTags as single_line_string
		bookmark_count: WFBookmarkCount as optional stepper with_default 5} returning ordered_list of: url «Pinboard Bookmarks» requires {
	id: “is.workflow.actions.pinboard.get”
	category: “Web”
	tags: [#url, #web, #later, #save, #pinboard]
}

shortcut_action play_music { «Plays music using the Music app.»
		music: WFMediaItems as media_picker
		shuffle: WFPlayMusicActionShuffle as choice [“Off”, “Songs”]
		repeat: WFPlayMusicActionRepeat as choice [“None”, “One”, “All”]} returning input requires {
	id: “is.workflow.actions.playmusic”
	category: “Media/Music”
	tags: [#play, #song, #ipod, #track, #music, #itunes, #library]
}

shortcut_action play_podcast { «Plays a podcast using the Podcasts app.»
		podcast: WFPodcastShow as podcast_picker} returning input requires {
	id: “is.workflow.actions.playpodcast”
	category: “Media”
	tags: [#play, #podcast, #show, #library]
}

shortcut_action play_sound { «Plays the audio file passed as input, or a default notification sound if no audio file was passed.»
		sound_file: WFInput as identifier} returning input requires {
	id: “is.workflow.actions.playsound”
	category: “Scripting/Notification”
	tags: [#notification, #audio, #music]
}

shortcut_action add_to_pocket { «Adds the input to Pocket.»
		tags: WFPocketTags as single_line_string
		url: WFInputURL as single_line_string} returning input requires {
	id: “is.workflow.actions.pocket.add”
	category: “Web”
	tags: []
}

shortcut_action get_items_from_pocket { «Returns items in your Pocket account.»
		pocket_item_count: WFPocketItemCount as stepper
		pocket_item_state: WFPocketItemState as optional choice [“Unread”, “Archived”, “All”] with_default “All”
		pocket_item_search_term: WFPocketItemSearchTerm as single_line_string
		pocket_item_search_tags: WFPocketItemSearchTags as single_line_string} returning ordered_list of: URL «Items from Pocket» requires {
	id: “is.workflow.actions.pocket.get”
	category: “Web”
	tags: []
}

shortcut_action subscribe_to_podcast { «Subscribes to podcasts or podcast feed URLs passed into the action.»
		podcast_url: WFInput as single_line_string} returning input requires {
	id: “is.workflow.actions.podcasts.subscribe”
	category: “Media”
	tags: [#url, #podcast, #show, #subscribe]
}

shortcut_action post_on_facebook { «Shares the input on Facebook.»
		_ as ordered_list of: (image OR av_asset OR url OR string)
		content: FacebookContent as identifier} returning nothing requires {
	id: “is.workflow.actions.postonfacebook”
	category: “Sharing”
	tags: [#share, #text, #post, #facebook, #fb]
}

shortcut_action quick_look { «Displays a preview of the input.»
		input: WFInput as identifier
		full_screen: WFQuickLookActionFullScreen as boolean} returning input requires {
	id: “is.workflow.actions.previewdocument”
	category: “Documents/Previewing”
	tags: [#preview, #show, #file, #document, #quicklook, #quick, #look]
}

shortcut_action print { «Prints the input using AirPrint.»
		input: WFInput as identifier} returning input requires {
	id: “is.workflow.actions.print”
	category: “Documents/Printing”
	tags: [#pdf, #print, #printer, #airprint]
}

shortcut_action get_details_of_app_store_app {} returning nothing requires {
	id: “is.workflow.actions.properties.appstore”
	category: “Media”
	tags: []
}

shortcut_action get_details_of_article {} returning nothing requires {
	id: “is.workflow.actions.properties.articles”
	category: “Web/Articles”
	tags: []
}

shortcut_action get_details_of_calendar_events {} returning nothing requires {
	id: “is.workflow.actions.properties.calendarevents”
	category: “Calendar/Calendar”
	tags: []
}

shortcut_action get_details_of_contacts {} returning nothing requires {
	id: “is.workflow.actions.properties.contacts”
	category: “Contacts/Contacts”
	tags: []
}

shortcut_action get_details_of_event_attendees {} returning nothing requires {
	id: “is.workflow.actions.properties.eventattendees”
	category: “Calendar/Event Attendees”
	tags: []
}

shortcut_action get_details_of_files {
		_ as data} returning nothing requires {
	id: “is.workflow.actions.properties.files”
	category: “Documents/Files”
	tags: []
}

shortcut_action get_details_of_health_sample {} returning nothing requires {
	id: “is.workflow.actions.properties.health.quantity”
	category: “Health/Get”
	tags: []
}

shortcut_action get_details_of_images {
		_ as (photo_media OR image OR av_asset)} returning nothing requires {
	id: “is.workflow.actions.properties.images”
	category: “Media/Images”
	tags: [#photo, #video, #media]
}

shortcut_action get_details_of_itunes_artist {} returning nothing requires {
	id: “is.workflow.actions.properties.itunesartist”
	category: “Media”
	tags: []
}

shortcut_action get_details_of_itunes_product {} returning nothing requires {
	id: “is.workflow.actions.properties.itunesstore”
	category: “Media”
	tags: []
}

shortcut_action get_details_of_locations {} returning nothing requires {
	id: “is.workflow.actions.properties.locations”
	category: “Location”
	tags: [#geocode, #latitude, #longitude]
}

shortcut_action get_details_of_music {
		_ as (mp_media OR av_asset)} returning nothing requires {
	id: “is.workflow.actions.properties.music”
	category: “Media/Music”
	tags: []
}

shortcut_action get_details_of_note {} returning nothing requires {
	id: “is.workflow.actions.properties.note”
	category: “Documents”
	tags: []
}

shortcut_action get_details_of_podcast_episode {} returning nothing requires {
	id: “is.workflow.actions.properties.podcast”
	category: “Media”
	tags: []
}

shortcut_action get_details_of_podcast {} returning nothing requires {
	id: “is.workflow.actions.properties.podcastshow”
	category: “Media”
	tags: []
}

shortcut_action get_details_of_reminders {} returning nothing requires {
	id: “is.workflow.actions.properties.reminders”
	category: “Calendar/Reminders”
	tags: []
}

shortcut_action get_details_of_safari_web_page {} returning nothing requires {
	«Safari Web Page items are only available when running your shortcut as an Action Extension in Safari.»
	id: “is.workflow.actions.properties.safariwebpage”
	category: “Web/Safari”
	tags: []
}

shortcut_action get_details_of_shazam {} returning nothing requires {
	id: “is.workflow.actions.properties.shazam”
	category: “Documents”
	tags: []
}

shortcut_action get_details_of_stocks {} returning nothing requires {
	id: “is.workflow.actions.properties.stock”
	category: “Finance/Get”
	tags: []
}

shortcut_action get_details_of_trello_item {
		_ as ordered_list of: (trello_board OR trello_list OR trello_card)} returning nothing requires {
	id: “is.workflow.actions.properties.trello”
	category: “Text”
	tags: []
}

shortcut_action get_details_of_ulysses_sheet {
		_ as ordered_list of: ulysses_sheet} returning nothing requires {
	id: “is.workflow.actions.properties.ulysses.sheet”
	category: “Documents”
	tags: []
}

shortcut_action get_details_of_weather_conditions {} returning nothing requires {
	id: “is.workflow.actions.properties.weather.conditions”
	category: “Location/Weather”
	tags: []
}

shortcut_action add_to_reading_list { «Adds URLs passed into the action to your reading list.»
		url: WFURL as single_line_string} returning input requires {
	id: “is.workflow.actions.readinglist”
	category: “Web/Safari”
	tags: [#url, #web, #later, #save, #reading, #list]
}

shortcut_action record_audio { «Uses the microphone to record audio.»
		audio_quality: WFRecordingCompression as optional choice [“Normal”, “Very High”] with_default “Normal”
		start_recording: WFRecordingStart as optional choice [“On Tap”, “Immediately”] with_default “On Tap”
		finish_recording: WFRecordingEnd as optional choice [“On Tap”, “After Time”] with_default “On Tap”
		duration: WFRecordingTimeInterval as time_interval} returning M4A_audio «Recorded Audio» requires {
	id: “is.workflow.actions.recordaudio”
	category: “Media/Audio”
	tags: [#camera, #clip, #record]
}

shortcut_action show_reminders_list { «Shows the specified list in the Reminders app.»
		list: WFList as reminders_list_picker} returning nothing requires {
	id: “is.workflow.actions.reminders.showlist”
	category: “Calendar/Reminders”
	tags: [#task, #todo, #to_do]
}

shortcut_action remove_events { «Removes all events passed into the action from the calendars they are contained in.»
		_ as ordered_list of: event
		include_future_events: WFCalendarIncludeFutureEvents as optional boolean with_default false
		events: WFInputEvents as identifier} returning nothing requires {
	«This is a destructive and permanent action. You will be asked to confirm before events are removed.»
	id: “is.workflow.actions.removeevents”
	category: “Calendar/Calendar”
	tags: [#calendar, #delete]
}

shortcut_action remove_from_photo_album { «Removes the photos or videos passed as input from the specified photo album.»
		_ as ordered_list of: photo_media
		album: WFRemoveAlbumSelectedGroup as photo_album_picker
		input: WFInput as identifier} returning ordered_list of: photo «Removed Photo Media» requires {
	id: “is.workflow.actions.removefromalbum”
	category: “Media/Photos”
	tags: [#remove, #photo, #photos, #picture, #image, #album]
}

shortcut_action remove_reminders { «Removes all reminders passed into the action from the lists they are contained in.»
		_ as ordered_list of: reminder
		reminders: WFInputReminders as identifier} returning nothing requires {
	«This is a destructive and permanent action. You will be asked to confirm before reminders are removed.»
	id: “is.workflow.actions.removereminders”
	category: “Calendar/Reminders”
	tags: [#calendar, #delete]
}

shortcut_action repeat { «Repeats the contained actions, running them the specified number of times.»
		repeat_count: WFRepeatCount as stepper} returning input requires {
	id: “is.workflow.actions.repeat.count”
	category: “Scripting/Control Flow”
	tags: [#loop, #while, #for]
}

shortcut_action repeat_with_each { «Takes a list of items as input, and runs the contained actions once for each item in the list.»
		_ as ordered_list of: item
		items: WFInput as identifier} returning ordered_list of: item «Repeat with Each» requires {
	id: “is.workflow.actions.repeat.each”
	category: “Scripting/Control Flow”
	tags: [#loop, #while, #for]
}

shortcut_action request_ride { «Requests a ride from the specified pickup location to a specified drop off location.»
		_ as location
		app: IntentAppIdentifier as intent_app_picker but_not [ask, variable]
		pickup_location: PickupLocation as location
		drop_off_location: DropOffLocation as location
		ride_type: RideOption as ride_option
		payment_method: PaymentMethod as payment_method
		party_size: PartySize as optional stepper with_default 1} returning ride_status requires {
	id: “is.workflow.actions.ride.requestride”
	category: “Location/Ride”
	tags: [#ride, #request, #taxi]
}

shortcut_action round_number { «Rounds the number(s) passed into the action.»
		_ as ordered_list of: number
		input: WFInput as number
		round_to: WFRoundTo as optional choice [“Millions”, “Hundred Thousands”, “Ten Thousands”, “Thousands”, “Hundreds Place”, “Tens Place”, “Ones Place”, “Tenths”, “Hundredths”, “Thousandths”, “Ten Thousandths”, “Hundred Thousandths”, “Millionths”, “Ten Millionths”, “Hundred Millionths”, “Billionths”, “10 ^”] with_default “Ones Place”
		round_mode: WFRoundMode as optional choice [“Normal”, “Always Round Up”, “Always Round Down”] with_default “Normal”
		ten_to_the_power_of: TenToThePowerOf as optional integer with_default 0} returning ordered_list of: decimal_number «Rounded Number» requires {
	id: “is.workflow.actions.round”
	category: “Scripting/Math”
	tags: [#calculator, #calculate, #number, #ceiling, #floor]
}

shortcut_action get_items_from_rss_feed { «Downloads the latest items from an RSS feed.»
		rss_feedurl: WFRSSFeedURL as optional single_line_string with_default “https://www.apple.com/newsroom/rss-feed.rss”
		rss_item_quantity: WFRSSItemQuantity as optional stepper with_default 10} returning ordered_list of: (article OR URL) «Items from RSS Feed» requires {
	id: “is.workflow.actions.rss”
	category: “Web/RSS”
	tags: [#article, #podcast, #text, #clipboard, #copy, #paste]
}

shortcut_action get_rss_feeds_from_page { «Extracts any RSS feed URLs from the given web URLs or web page.»
		_ as ordered_list of: (url OR rich_text)
		page: WFURLs as single_line_string} returning ordered_list of: url «RSS Feeds from Page» requires {
	id: “is.workflow.actions.rss.extract”
	category: “Web/RSS”
	tags: [#extract, #clipboard, #copy, #paste]
}

shortcut_action share_with_extensions { «Prompts to share the input using action extensions and sharing extensions provided by other apps.»
		input: WFInput as identifier} returning input requires {
	id: “is.workflow.actions.runextension”
	category: “Sharing/System”
	tags: [#action, #extension, #sharing, #share, #‘ios_8’, #app, #inter]
}

shortcut_action run_javascript_on_web_page { «Runs JavaScript on a Safari web page passed in as input»
		_ as safari_web_page
		javascript: WFJavaScript as optional string with_default “var result = [];
// Get all links from the page
var elements = document.querySelectorAll(""a"");
for (let element of elements) {
	result.push({
		""url"": element.href,
		""text"": element.innerText
	});
}

// Call completion to finish
completion(result);”
		web_page: WFInput as identifier} returning (keyed_list OR string OR boolean OR number) «JavaScript Result» requires {
	«Safari Web Page items are only available when running your shortcut as an Action Extension in Safari.»
	id: “is.workflow.actions.runjavascriptonwebpage”
	category: “Web/Safari”
	tags: [#script, #safari, #java, #javascript, #web_page, #webkit, #browser, #json, #web, #page, #website]
}

shortcut_action run_script_over_ssh { «Runs a script on a remote computer over SSH.»
		_ as data
		host: WFSSHHost as single_line_string
		port: WFSSHPort as optional single_line_string with_default “22”
		user: WFSSHUser as single_line_string
		authentication: WFSSHAuthenticationType as optional choice [“Password”, “SSH Key”] with_default “Password” but_not [ask, variable]
		password: WFSSHPassword as single_line_string
		ssh_key: WFSSHKey as ssh_key
		input: WFInput as identifier
		script: WFSSHScript as string} returning data «Shell Script Result» requires {
	id: “is.workflow.actions.runsshscript”
	category: “Scripting/Shell”
	tags: [#unix, #shell, #script, #ssh, #terminal, #linux, #mac]
}

shortcut_action run_shortcut { «Run a shortcut from your shortcut.»
		_ as ordered_list of: item
		shortcut: WFWorkflowName as workflow_picker
		input: WFInput as identifier
		show_while_running: WFShowWorkflow as optional boolean with_default true} returning ordered_list of: item «Shortcut Result» requires {
	id: “is.workflow.actions.runworkflow”
	category: “Scripting/Shortcuts”
	tags: [#action, #workflow, #shortcuts]
}

shortcut_action save_to_photo_album { «Adds the photos and videos passed as input to the specified photo album.»
		_ as ordered_list of: (photo_media OR image OR asset)
		album: WFCameraRollSelectedGroup as photo_album_picker
		input: WFInput as identifier} returning ordered_list of: photo «Saved Photo Media» requires {
	«If a photo passed as input is already in the specified album, the photo will be duplicated.»
	id: “is.workflow.actions.savetocameraroll”
	category: “Media/Photos”
	tags: [#save, #photo, #photos, #picture, #image, #camera, #roll]
}

shortcut_action ‘scan_qr/bar_code’ { «Scans a QR code or bar code using the camera, and returns the text/URL that is found.»} returning machine_readable_code «QR/Bar Code» requires {
	id: “is.workflow.actions.scanbarcode”
	category: “Documents/QR Codes”
	tags: []
}

shortcut_action search_app_store { «Searches the App Store, returning the apps that match the specified search terms. You can get more details about the results using the Get Details of App Store App action.»
		search_term: WFSearchTerm as single_line_string
		attribute: WFAttribute as dynamic_choice
		entity: WFEntity as dynamic_choice
		country: WFCountry as i_tunes_store_country_picker
		item_limit: WFItemLimit as optional stepper with_default 25} returning ordered_list of: app_store_app «App Store Apps» requires {
	id: “is.workflow.actions.searchappstore”
	category: “Media”
	tags: [#app, #song, #music, #movie, #ebook, #audiobook, #tv, #album, #store]
}

shortcut_action search_itunes_store { «Searches the iTunes Store, returning the items that match the specified search terms. You can get more details about the results using the Get Details of iTunes Product action.»
		search_term: WFSearchTerm as single_line_string
		media_type: WFMediaType as dynamic_choice
		attribute: WFAttribute as dynamic_choice
		entity: WFEntity as dynamic_choice
		country: WFCountry as i_tunes_store_country_picker
		item_limit: WFItemLimit as optional stepper with_default 25} returning ordered_list of: i_tunes_product «iTunes Products» requires {
	id: “is.workflow.actions.searchitunes”
	category: “Media”
	tags: [#app, #song, #music, #movie, #ebook, #audiobook, #tv, #album, #store]
}

shortcut_action search_local_businesses { «Searches for nearby businesses.»
		_ as location
		location: WFInput as location
		search: WFSearchQuery as single_line_string
		radius: WFSearchRadius as search_local_businesses_radius} returning ordered_list of: map_item «Local Businesses» requires {
	id: “is.workflow.actions.searchlocalbusinesses”
	category: “Location/Routing”
	tags: [#maps, #search, #query, #place, #location, #nearby, #find]
}

shortcut_action show_in_maps { «Opens your choice of Maps, Google Maps, or Waze and searches for the location, place, or text that was passed into the action.»
		location: WFInput as location
		app: WFSearchMapsActionApp as hidden_parameter {optional maps_app_picker with_default “Maps”}} returning input requires {
	id: “is.workflow.actions.searchmaps”
	category: “Location/Maps”
	tags: [#maps, #search, #query, #places, #waze, #google]
}

shortcut_action search_podcasts { «Searches Podcasts, returning the items that match the specified search terms.»
		search_term: WFSearchTerm as single_line_string
		attribute: WFAttribute as dynamic_choice
		entity: WFEntity as dynamic_choice
		country: WFCountry as i_tunes_store_country_picker
		item_limit: WFItemLimit as optional stepper with_default 25} returning ordered_list of: podcast_show «Podcasts» requires {
	id: “is.workflow.actions.searchpodcasts”
	category: “Media”
	tags: [#podcast]
}

shortcut_action search_web { «Searches the web for the text provided as input.»
		service: WFSearchWebDestination as optional choice [“Amazon”, “Bing”, “DuckDuckGo”, “eBay”, “Google”, “Reddit”, “Twitter”, “Yahoo!”, “YouTube”] with_default “Google”
		text: WFInputText as single_line_string} returning input requires {
	id: “is.workflow.actions.searchweb”
	category: “Web/Safari”
	tags: [#amazon, #bing, #duckduckgo, #ebay, #google, #reddit, #twitter, #‘yahoo!’, #youtube, #internet, #website]
}

shortcut_action select_contact { «Prompts to pick a person from your contacts and passes the selection to the next action.»
		select_multiple: WFSelectMultiple as boolean} returning ordered_list of: contact «Contacts» requires {
	id: “is.workflow.actions.selectcontacts”
	category: “Contacts/Contacts”
	tags: [#select, #person, #people, #contact, #addressbook]
}

shortcut_action select_email_address { «Prompts to pick an email address from your contacts and passes the selection to the next action.»} returning ordered_list of: email_address «Email Addresses» requires {
	id: “is.workflow.actions.selectemail”
	category: “Contacts/Email”
	tags: [#select, #email, #address, #e_mail, #addressbook]
}

shortcut_action select_phone_number { «Prompts to pick a phone number from your contacts and passes the selection to the next action.»} returning ordered_list of: phone_number «Phone Numbers» requires {
	id: “is.workflow.actions.selectphone”
	category: “Contacts/Phone”
	tags: [#select, #phone, #number, #telephone, #addressbook]
}

shortcut_action select_photos { «Prompts to choose photos and videos from your photo library.»
		select_multiple: WFSelectMultiplePhotos as boolean} returning ordered_list of: photo «Photos» requires {
	id: “is.workflow.actions.selectphoto”
	category: “Media/Photos”
	tags: [#select, #photo, #from, #library, #picture]
}

shortcut_action send_email { «Presents an email composer. Pass text into the action to set the email body. Other types of input are added as attachments.»
		send_email_action_show_compose_sheet: WFSendEmailActionShowComposeSheet as optional boolean with_default true
		email_account_action_selected_account: WFEmailAccountActionSelectedAccount as custom_intent_dynamic_enumeration
		send_email_action_from: WFSendEmailActionFrom as single_line_string
		send_email_action_to_recipients: WFSendEmailActionToRecipients as email_address_field
		send_email_action_cc_recipients: WFSendEmailActionCcRecipients as email_address_field
		send_email_action_bcc_recipients: WFSendEmailActionBccRecipients as email_address_field
		send_email_action_subject: WFSendEmailActionSubject as single_line_string
		send_email_action_input_attachments: WFSendEmailActionInputAttachments as single_line_string
		send_email_action_save_as_draft: WFSendEmailActionSaveAsDraft as boolean} returning input requires {
	id: “is.workflow.actions.sendemail”
	category: “Sharing/Messaging”
	tags: [#email, #e_mail, #mail, #send, #gmail, #yahoo, #hotmail, #icloud, #aol]
}

shortcut_action send_message { «Sends an iMessage or SMS. Pass images, videos, or other files as input to include attachments.»
		intent_app_identifier: IntentAppIdentifier as hidden_parameter {optional intent_app_picker with_default “com.apple.MobileSMS”}
		show_when_run: ShowWhenRun as optional boolean with_default true
		send_message_action_recipients: WFSendMessageActionRecipients as contact_handle_field
		send_message_content: WFSendMessageContent as string
		send_message_prefix: WFSendMessagePrefix as hidden_parameter {single_line_string}} returning input requires {
	id: “is.workflow.actions.sendmessage”
	category: “Sharing/Messaging”
	tags: [#message, #sms, #send, #text]
}

shortcut_action copy_to_clipboard { «Copies the result of the last action to the clipboard.»
		local_only: WFLocalOnly as optional boolean with_default false
		expire_at: WFExpirationDate as date
		content: WFInput as identifier} returning input requires {
	id: “is.workflow.actions.setclipboard”
	category: “Sharing/Clipboard”
	tags: [#text, #clipboard, #copy, #paste, #set]
}

shortcut_action set_name { «Sets the name of the item passed as input.»
		_ as item
		name: WFName as single_line_string
		don_t_include_file_extension: WFDontIncludeFileExtension as boolean
		input: WFInput as identifier} returning item «Renamed Item» requires {
	id: “is.workflow.actions.setitemname”
	category: “Scripting/Items”
	tags: [#title]
}

shortcut_action set_playback_destination { «Sets playback destination to a device.»
		device: WFMediaRoute as optional media_route_picker with_default “Local” but_not [variable]} returning nothing requires {
	id: “is.workflow.actions.setplaybackdestination”
	category: “/Device”
	tags: [#device, #airplay, #playback, #audio, #route]
}

shortcut_action set_dictionary_value { «Sets a value in the dictionary passed into the action. »
		_ as keyed_list
		dictionary_key: WFDictionaryKey as single_line_string
		dictionary_value: WFDictionaryValue as single_line_string
		dictionary: WFDictionary as identifier} returning keyed_list «Dictionary» requires {
	id: “is.workflow.actions.setvalueforkey”
	category: “Scripting/Dictionaries”
	tags: [#json, #plist, #xml, #urlencoded, #query, #string, #for, #key, #update, #merge]
}

shortcut_action set_variable { «Sets the value of the specified variable to the input of this action.»
		input: WFInput as identifier
		variable: WFVariableName as identifier} returning input requires {
	id: “is.workflow.actions.setvariable”
	category: “Scripting/Variables”
	tags: [#programming, #scripting, #var]
}

shortcut_action set_volume { «Sets the system volume.»
		volume: WFVolume as optional slider with_default 0.5} returning input requires {
	id: “is.workflow.actions.setvolume”
	category: “/Playback”
	tags: [#sound, #speaker, #loud]
}

shortcut_action share { «Prompts to share the input.»
		input: WFInput as identifier} returning input requires {
	id: “is.workflow.actions.share”
	category: “Sharing/System”
	tags: [#share, #file, #document, #send]
}

shortcut_action shazam_it { «Uses the microphone to listen to and identify nearby media.»} returning shazam_media «Shazam Media» requires {
	id: “is.workflow.actions.shazamMedia”
	category: “Media/Audio”
	tags: [#song, #identification, #shazam, #music]
}

shortcut_action show_definition { «Shows the definition of the word passed into the action.»
		word: Word as single_line_string} returning input requires {
	id: “is.workflow.actions.showdefinition”
	category: “Documents/Text”
	tags: [#define, #word, #dictionary, #lookup, #term]
}

shortcut_action show_in_blindsquare { «Opens BlindSquare showing information about the place passed as input, so you can save it as a favorite, start tracking it, or start simulation mode.»
		start_simulation: WFBlindSquareSimulation as optional boolean with_default false
		location: WFInput as location} returning input requires {
	id: “is.workflow.actions.showinblindsquare”
	category: “Location/Maps”
	tags: []
}

shortcut_action show_in_calendar { «Shows the date or calendar event passed as input in the Calendar app.»
		event: WFEvent as identifier} returning input requires {
	id: “is.workflow.actions.showincalendar”
	category: “Calendar/Calendar”
	tags: [#date, #event, #show, #reveal]
}

shortcut_action show_in_itunes_store { «Shows the iTunes products or App Store apps passed as input in a store sheet. This is useful with the Search iTunes Store and Search App Store actions.»
		product: WFProduct as identifier} returning input requires {
	id: “is.workflow.actions.showinstore”
	category: “Media”
	tags: [#app, #song, #music, #movie, #ebook, #audiobook, #tv, #album, #store]
}

shortcut_action show_note { «Opens the note passed in as input.»
		note: WFInput as identifier} returning input requires {
	id: “is.workflow.actions.shownote”
	category: “Documents”
	tags: [#apple]
}

shortcut_action show_result { «Shows the specified text in Siri or in an alert.»
		text: Text as optional string with_default “”} returning input requires {
	id: “is.workflow.actions.showresult”
	category: “Scripting/Notification”
	tags: [#text, #such_text, #very_speech, #much_words, #so_wow, #string, #display]
}

shortcut_action show_web_page { «Shows the web URL passed into the action in a Safari View Controller, allowing you to view the web page without switching apps.»
		enter_safari_reader: WFEnterSafariReader as optional boolean with_default false
		url: WFURL as single_line_string} returning input requires {
	id: “is.workflow.actions.showwebpage”
	category: “Web/Safari”
	tags: [#safari, #view, #controller, #open, #website, #preview, #quick, #look]
}

shortcut_action unknown_intent {
		show_when_run: ShowWhenRun as optional boolean with_default true} returning input requires {
	id: “is.workflow.actions.sirikit.donation.handle”
	category: “”
	tags: []
}

shortcut_action skip_back { «Skips to the previous song in the current music queue.»
		skip_to: WFSkipBackBehavior as optional choice [“Beginning”, “Previous Song”] with_default “Beginning”
		device: WFMediaRoute as optional media_route_picker with_default “Local” but_not [variable]} returning input requires {
	id: “is.workflow.actions.skipback”
	category: “Media/Playback”
	tags: [#ipod, #track, #music, #itunes, #previous]
}

shortcut_action skip_forward { «Skips to the next song in the current music queue.»
		device: WFMediaRoute as optional media_route_picker with_default “Local” but_not [variable]} returning input requires {
	id: “is.workflow.actions.skipforward”
	category: “Media/Playback”
	tags: [#ipod, #track, #music, #itunes, #next]
}

shortcut_action post_to_slack { «Posts the input to the specified Slack channel.»
		account: WFAccount as account_picker but_not [ask, variable]
		channel: SlackChannel as slack_channel_picker
		content: WFSlackInput as identifier} returning input requires {
	id: “is.workflow.actions.slack.send”
	category: “Sharing/Messaging”
	tags: [#send, #text, #gif, #image, #video]
}

shortcut_action speak_text { «Speaks the inputted text aloud.»
		wait_until_finished: WFSpeakTextWait as optional boolean with_default true
		rate: WFSpeakTextRate as speak_text_rate
		pitch: WFSpeakTextPitch as optional slider with_default 1.0
		language: WFSpeakTextLanguage as optional speak_text_language_picker with_default “Default”
		voice: WFSpeakTextVoice as optional speak_text_voice_picker with_default “Default” but_not [variable]
		text: WFText as single_line_string} returning input requires {
	id: “is.workflow.actions.speaktext”
	category: “Documents/Text”
	tags: [#speak, #dictate, #text, #say, #speech, #talk, #out, #loud]
}

shortcut_action calculate_statistics { «Calculates statistics on the numbers that are provided as input.»
		_ as ordered_list of: number
		operation: WFStatisticsOperation as optional choice [“Average”, “Minimum”, “Maximum”, “Sum”, “Median”, “Mode”, “Range”, “Standard Deviation”] with_default “Average”
		input: Input as identifier} returning ordered_list of: number «Statistics» requires {
	id: “is.workflow.actions.statistics”
	category: “Scripting/Math”
	tags: [#number, #average, #mean, #mode, #median, #maximum, #deviation, #sum, #minimum]
}

shortcut_action get_stock_quote { «Gets the stock quote of the given stock.»
		stock_symbol: StockSymbol as single_line_string} returning stock_data «Stock Quote» requires {
	id: “is.workflow.actions.stocks.quote”
	category: “Finance/Get”
	tags: [#stock, #quote]
}

shortcut_action take_photo { «Uses the camera to take photos.»
		camera_capture_show_preview: WFCameraCaptureShowPreview as optional boolean with_default true
		photo_count: WFPhotoCount as optional stepper with_default 1
		camera_capture_device: WFCameraCaptureDevice as optional choice [“Front”, “Back”] with_default “Back”} returning ordered_list of: image «Photo» requires {
	id: “is.workflow.actions.takephoto”
	category: “Media/Camera”
	tags: [#camera, #take, #photo]
}

shortcut_action take_video { «Uses the camera to take a video clip.»
		camera: WFCameraCaptureDevice as optional choice [“Front”, “Back”] with_default “Back”
		quality: WFCameraCaptureQuality as optional choice [“Low”, “Medium”, “High”] with_default “Medium”
		start_recording: WFRecordingStart as optional choice [“On Tap”, “Immediately”] with_default “Immediately”} returning QuickTime_movie «Video» requires {
	id: “is.workflow.actions.takevideo”
	category: “Media/Camera”
	tags: [#camera, #clip, #record]
}

shortcut_action replace_text { «Replaces some text passed into the action with other text.»
		_ as ordered_list of: string
		find_text: WFReplaceTextFind as single_line_string
		replace_with: WFReplaceTextReplace as single_line_string
		case_sensitive: WFReplaceTextCaseSensitive as optional boolean with_default true
		regular_expression: WFReplaceTextRegularExpression as optional boolean with_default false
		text: WFInput as single_line_string} returning ordered_list of: string «Updated Text» requires {
	id: “is.workflow.actions.text.replace”
	category: “Documents/Text Editing”
	tags: [#finding, #matching, #searching, #regular, #expression, #regexp]
}

shortcut_action translate_text_with_microsoft { «Translates the text passed into the action into another language.»
		_ as ordered_list of: string
		language: WFSelectedFromLanguage as translate_text_language_picker
		to: WFSelectedLanguage as translate_text_language_picker
		text: WFInputText as single_line_string} returning ordered_list of: string «Translated Text» requires {
	«Powered by Microsoft Cognitive Services (microsoft.com/cognitive-services). Your text input will be sent to Microsoft to translate your request.»
	id: “is.workflow.actions.text.translate”
	category: “Documents/Translation”
	tags: [#microsoft, #bing, #translation, #language]
}

shortcut_action start_timer { «Starts a timer in the Clock app for the specified amount of time.»
		app: IntentAppIdentifier as hidden_parameter {optional intent_app_picker with_default “com.apple.mobiletimer-framework.MobileTimerIntents”}
		duration: WFDuration as duration_quantity_field} returning input requires {
	id: “is.workflow.actions.timer.start”
	category: “Calendar”
	tags: [#timer, #set, #clock, #stopwatch, #watch]
}

shortcut_action add_todoist_item { «Adds a new item to Todoist.»
		_ as ordered_list of: generic_file
		item: WFTodoistContent as single_line_string
		project: WFTodoistProject as optional todoist_project_picker with_default “Inbox”
		due_date: WFTodoistDueDate as date
		remind_me_on: WFTodoistReminder as date
		reminder_type: WFTodoistReminderType as optional choice [“Email”, “Push Notification”, “Text Message”] with_default “Email”
		priority: WFTodoistPriority as optional choice [“4”, “3”, “2”, “1”] with_default “4”
		notes: WFTodoistNotes as string
		files: WFTodoistFile as identifier} returning URL «Todoist Item» requires {
	id: “is.workflow.actions.todoist.add”
	category: “Text”
	tags: [#note, #text, #todo, #to_do, #task]
}

shortcut_action create_trello_board { «Creates a new board in your Trello account.»
		trello_name: WFTrelloName as single_line_string
		trello_description: WFTrelloDescription as string} returning trello_board «Trello Board» requires {
	id: “is.workflow.actions.trello.add.board”
	category: “Text”
	tags: []
}

shortcut_action add_trello_card { «Creates a new card on the specified list and board in your Trello account.»
		trello_name: WFTrelloName as single_line_string
		trello_board: WFTrelloBoard as trello_board_picker
		trello_list: WFTrelloList as trello_list_picker
		trello_due_date: WFTrelloDueDate as date
		trello_card_position: WFTrelloCardPosition as optional choice [“Top”, “Bottom”] with_default “Top”
		trello_attachments: WFTrelloAttachments as identifier
		trello_description: WFTrelloDescription as string} returning trello_card «Trello Card» requires {
	id: “is.workflow.actions.trello.add.card”
	category: “Text”
	tags: []
}

shortcut_action create_trello_list { «Creates a new list on the specified board in your Trello account.»
		name: WFTrelloName as single_line_string
		board: WFTrelloBoard as trello_board_picker
		position: WFTrelloPosition as optional choice [“Top”, “Bottom”] with_default “Top”} returning trello_list «Trello List» requires {
	id: “is.workflow.actions.trello.add.list”
	category: “Text”
	tags: []
}

shortcut_action get_trello_items { «Gets cards, lists, or boards in your Trello account.»
		get: WFTrelloItemType as optional choice [“Boards”, “Lists”, “Cards”] with_default “Boards”
		board: WFTrelloBoard as trello_board_picker
		list: WFTrelloList as trello_list_picker} returning ordered_list of: (trello_board OR trello_list OR trello_card) «Trello Items» requires {
	id: “is.workflow.actions.trello.get”
	category: “Text”
	tags: []
}

shortcut_action trim_media { «Presents a view allowing you to trim the media passed into the action.»
		_ as av_asset
		media: WFInputMedia as identifier} returning QuickTime_movie «Trimmed Media» requires {
	id: “is.workflow.actions.trimvideo”
	category: “Media/Video”
	tags: [#clip, #editor, #audio, #video, #movie]
}

shortcut_action post_to_tumblr { «Posts the content passed into the action to Tumblr.»
		_ as ordered_list of: (string OR image OR URL OR asset)
		content: WFInput as identifier
		compose_in_tumblr: WFComposeInApp as tumblr_compose_in_app
		blog: WFBlogName as tumblr_blog_picker
		type: WFPostType as optional dynamic_choice with_default “Text”
		post_status: WFPostState as optional choice [“Post Now”, “Add to Queue”, “Save as Draft”, “Post Privately”] with_default “Post Now”
		title: WFPostTitle as single_line_string
		source: WFPostSource as single_line_string
		caption: WFPostCaption as single_line_string
		tags: WFPostTags as single_line_string
		description: WFPostDescription as string} returning url «Tumblr Post URL» requires {
	id: “is.workflow.actions.tumblr.post”
	category: “Sharing/Social”
	tags: [#blog]
}

shortcut_action tweet { «Tweets the input.»
		_ as ordered_list of: (image OR url OR string)
		tweet: TweetInput as single_line_string} returning nothing requires {
	id: “is.workflow.actions.tweet”
	category: “Sharing”
	tags: [#twitter, #tweet, #social, #media, #sharing, #share]
}

shortcut_action extract_archive { «Extracts files from the archive passed as input. Many archive formats are supported, including zip, rar, tar.gz, tar.bz2, tar, gzip, cpio, cab, and iso archives.»
		_ as data
		archive: WFArchive as identifier} returning ordered_list of: generic_file «Files» requires {
	id: “is.workflow.actions.unzip”
	category: “Documents/Archives”
	tags: [#extract, #unarchive, #unzip, #contents, #gzip]
}

shortcut_action url { «Passes the specified URL to the next action.»
		url: WFURLActionURL as URL} returning URL «URL» requires {
	id: “is.workflow.actions.url”
	category: “Web/URLs”
	tags: [#text, #such_text, #very_speech, #much_words, #so_wow]
}

shortcut_action expand_url { «This action expands and cleans up URLs which have been shortened using a URL shortening service like TinyURL or Bit.ly.»
		_ as ordered_list of: url
		url: URL as single_line_string} returning ordered_list of: url «Expanded URL» requires {
	«The expanded URL is cleaned, removing unnecessary parameters such as "utm_source".»
	id: “is.workflow.actions.url.expand”
	category: “Web/URLs”
	tags: [#clean, #link, #links, #long, #short]
}

shortcut_action get_headers_of_url { «Retrieves the HTTP headers of the URL passed as input using a HEAD request.»
		_ as ordered_list of: url
		url: WFInput as single_line_string} returning ordered_list of: keyed_list «Headers of URL» requires {
	id: “is.workflow.actions.url.getheaders”
	category: “Web/Web Requests”
	tags: [#url, #web, #http]
}

shortcut_action url_encode { «Encodes or decodes text passed into the action to be suitable for inclusion in a URL by adding or removing percent escapes when appropriate.»
		_ as ordered_list of: string
		mode: WFEncodeMode as optional choice [“Encode”, “Decode”] with_default “Encode”
		text: WFInput as single_line_string} returning ordered_list of: string «URL Encoded Text» requires {
	id: “is.workflow.actions.urlencode”
	category: “Scripting/X-Callback”
	tags: [#url, #encode, #decode, #x, #callback, #x_callback, #xcallback, #urlencode, #urldecode]
}

shortcut_action unknown_user_activity {} returning input requires {
	id: “is.workflow.actions.useractivity.open”
	category: “”
	tags: []
}

shortcut_action send_payment { «Sends a payment to the specified people using a payment app on your device.»
		app: IntentAppIdentifier as optional intent_app_picker with_default “com.apple.PassKit.PassKitIntentsExtension” but_not [ask, variable]
		recipients: WFVenmoActionRecipients as contact_handle_field
		amount: WFVenmoActionAmount as currency_quantity_field
		open_in_app: WFVenmoActionAppSwitch as optional boolean with_default false
		note: WFVenmoActionNote as string} returning input requires {
	id: “is.workflow.actions.venmo.pay”
	category: “Contacts/Payments”
	tags: [#venmo, #money, #send, #pay, #request, #cash, #currency, #dollars]
}

shortcut_action request_payment { «Requests a payment from the specified people using a payment app on your device.»
		app: IntentAppIdentifier as optional intent_app_picker with_default “com.apple.PassKit.PassKitIntentsExtension” but_not [ask, variable]
		recipients: WFVenmoActionRecipients as contact_handle_field
		amount: WFVenmoActionAmount as number
		open_in_app: WFVenmoActionAppSwitch as optional boolean with_default false
		show_when_run: ShowWhenRun as optional boolean with_default true
		note: WFVenmoActionNote as string} returning input requires {
	id: “is.workflow.actions.venmo.request”
	category: “Contacts/Payments”
	tags: [#venmo, #money, #send, #pay, #request, #cash, #currency, #dollars]
}

shortcut_action vibrate_device { «Vibrates the device for a short amount of time.»
		haptic_pattern: WFVibrateHapticType as hidden_parameter {optional choice [“Default”, “Up Direction”, “Down Direction”, “Success”, “Failure”, “Retry”, “Start”, “Stop”, “Click”] with_default “Default”}} returning input requires {
	id: “is.workflow.actions.vibrate”
	category: “Scripting/Notification”
	tags: [#vibration, #taptic, #haptic, #notification, #alert]
}

shortcut_action view_content_graph { «Shows the results of the previous action in the Content Graph.»
		input: WFInput as identifier} returning input requires {
	id: “is.workflow.actions.viewresult”
	category: “Scripting/Items”
	tags: []
}

shortcut_action wait_to_return { «Pauses execution until you leave the Shortcuts app and return to it.

This action might be useful after an action that switches apps, to pause execution until you return to the Shortcuts app.»} returning input requires {
	id: “is.workflow.actions.waittoreturn”
	category: “Scripting/Control Flow”
	tags: [#wait]
}

shortcut_action get_current_weather { «Gets the current weather conditions at the specified location.»
		location: WFWeatherCustomLocation as location} returning weather_data «Weather Conditions» requires {
	id: “is.workflow.actions.weather.currentconditions”
	category: “Location/Weather”
	tags: [#current, #temperature, #visibility, #humidity, #pressure, #wind, #sunrise, #sunset]
}

shortcut_action get_weather_forecast { «Gets an hourly or daily weather forecast at the specified location.»
		location: WFWeatherCustomLocation as location
		type: WFWeatherForecastType as optional choice [“Hourly”, “Daily”] with_default “Daily”} returning ordered_list of: weather_data «Weather Conditions» requires {
	id: “is.workflow.actions.weather.forecast”
	category: “Location/Weather”
	tags: [#current, #temperature, #visibility, #humidity, #pressure, #wind, #sunrise, #sunset]
}

shortcut_action post_to_wordpress { «Posts the input to a WordPress blog as a new post or page.»
		_ as ordered_list of: (rich_text OR string OR image)
		account: WFAccount as account_picker but_not [ask, variable]
		blog: Blog as dynamic_choice but_not [ask, variable]
		title: Title as single_line_string
		type: Type as dynamic_choice
		format: Format as dynamic_choice
		status: Status as dynamic_choice
		categories: Categories as dynamic_tag_field
		tags: Tags as dynamic_tag_field
		advanced: Advanced as expanding
		allow_comments: AllowComments as boolean
		slug: Slug as single_line_string
		excerpt: Excerpt as single_line_string
		date: Date as date
		template: Template as dynamic_choice
		thumbnail_image: ThumbnailImage as identifier
		show_custom_fields: ShowCustomFields as expanding
		custom_fields: CustomFields as keyed_list
		input: WFInput as identifier} returning URL «WordPress Post URL» requires {
	id: “is.workflow.actions.wordpress.post”
	category: “Sharing”
	tags: []
}

shortcut_action start_workout { «Starts a workout on your Apple Watch.»
		intent_app_identifier: IntentAppIdentifier as hidden_parameter {optional intent_app_picker with_default “com.apple.SessionTrackerApp”}
		workout_name: workoutName as fitness_workout_type_picker
		is_open_ended: isOpenEnded as optional boolean with_default true
		workout_goal: WorkoutGoal as optional workout_goal_quantity_field with_default “15”} returning input requires {
	id: “is.workflow.actions.workout.start”
	category: “Workout”
	tags: [#workout, #watch, #fitness]
}

shortcut_action add_wunderlist_task { «Adds a new task to Wunderlist.»
		_ as ordered_list of: generic_file
		task: WFWunderlistTitle as single_line_string
		list: WFWunderlistList as wunderlist_list_picker
		due_date: WFWunderlistDueDate as date
		reminder: WFWunderlistReminder as date
		starred: WFWunderlistStarred as boolean
		notes: WFWunderlistNotes as string
		file: WFWunderlistFile as identifier} returning URL «Wunderlist Task» requires {
	id: “is.workflow.actions.wunderlist.add”
	category: “Text”
	tags: [#note, #text, #todo, #to_do, #task]
}

