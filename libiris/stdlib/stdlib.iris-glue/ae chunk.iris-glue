
«TODO: need a `reference` coercion for use in handler interface (Q. should any of these arguments require a literal reference)»

«TODO: FIX: ignoring duplicate definition for: ‘before’/‘after’ {expression as expression} returning expression (TBH, it’s about time to implement basic multimethod support, allowing multiple handlers to be added to same slot, for now matching record labels only to determine which handler to invoke)»

«== Application object constructor ==»

swift_handler (‘app’ {bundle_identifier as string} returning value) requires {
    can_error: true «TODO: errors (e.g. app not found) should only occur upon use, not creation»
    swift_function: Application
}


«== Element selectors ==»

«== single element ==»

swift_handler ‘at’ {element_type as name, selector_data as expression} returning expression requires {
    can_error: true
    use_scopes: [#command, #handler] «`elements at expr thru expr` will eval exprs in handler’s scope, delegating to command scope»
    swift_function: atSelector {elementType, selectorData}
    operator: {infix [“at”, “index”], 1110, #none}
}

swift_handler ‘named’ {element_type as name, selector_data as expression} returning expression requires {
    can_error: true
    use_scopes: #command
    swift_function: nameSelector {elementType, selectorData}
    operator: {infix “named”, 1110, #none}
}

swift_handler ‘id’ {element_type as name, selector_data as expression} returning expression requires { «TODO: what about ‘id’ properties? (easiest is to define id as .atom operator as well as .infix, with multimethod despatching on 0/2 operands; while operators could in principle fall back to commands when the operands found don’t match any of the known operator definitions, it would be hard to distinguish an intended command from an operator with missing arguments [i.e. syntax error])»
    can_error: true
    use_scopes: #command
    swift_function: idSelector {elementType, selectorData}
    operator: {infix “id”, 1110, #none}
}

«=== multiple elements ===»

swift_handler ‘from’ {element_type as name, selector_data as expression} returning expression requires { «TO DO: use `at` for both index and range specifiers? probably a good idea: it’d also need to support `named TEXT thru TEXT` in order to distinguish numeric from non-numeric selectors when using shorthand range syntax»
    can_error: true
    use_scopes: [#command, #handler]
    swift_function: rangeSelector {elementType, selectorData}
    operator: {infix “from”, 1110, #none}
}

swift_handler ‘whose’ {element_type as name, selector_data as expression} returning expression requires {
    can_error: true
    use_scopes: [#command, #handler] «`elements where expr` will eval expr in handler’s scope, delegating to command scope, allowing expr to refer to properties and elements without requiring an explicit `its`»
    swift_function: testSelector {elementType, selectorData}
    operator: {infix [“whose”, “where”], 1110, #none}
}

«=== element range ===»

swift_handler ‘thru’ {start_selector as expression, stop_selector as expression} returning expression requires {
    swift_function: ElementRange {‘from’, ‘to’}
    operator: {infix [“thru”, “through”], 1120, #none}
}

«=== absolute ordinal ===»

swift_handler ‘first’ {element_type as name} returning expression requires {
    swift_function: firstElement
    operator: {prefix “first”, precedence: 1130}
}

swift_handler ‘middle’ {element_type as name} returning expression requires {
    swift_function: middleElement
    operator: {prefix “middle”, precedence: 1130}
}

swift_handler ‘last’ {element_type as name} returning expression requires {
    swift_function: lastElement
    operator: {prefix “last”, precedence: 1130}
}

swift_handler ‘any’ {element_type as name} returning expression requires { «TODO: what to call this? ‘any’? ‘some’? ‘random’?»
    swift_function: randomElement
    operator: {prefix [“any”, “some”], precedence: 1130}
}

swift_handler ‘every’ {element_type as name} returning expression requires {
    swift_function: allElements
    operator: {prefix [“every”, “all”], precedence: 1130}
}

«=== relative ordinal ===»

swift_handler ‘before’ {element_type as name, reference as expression} returning expression requires {
    swift_function: beforeElement
    operator: {[expression “element_type”, keyword “before”, expression “reference”], precedence: 1106, #right}
}

swift_handler ‘after’ {element_type as name, reference as expression} returning expression requires {
    swift_function: afterElement
    operator: {[expression “element_type”, keyword “after”, expression “reference”], precedence: 1106, #right}
}

«== Insertion location ==»

swift_handler ‘before’ {reference as expression} returning expression requires {
    swift_function: insertBefore
    operator: {[keyword “before”, expression “reference”], precedence: 1106}
}

swift_handler ‘after’ {reference as expression} returning expression requires {
    swift_function: insertAfter
    operator: {[keyword “after”, expression “reference”], precedence: 1106}
}

swift_handler ‘beginning’ returning expression requires {
    swift_function: insertAtBeginning
    operator: {atom [“beginning”], precedence: 1106}
}

swift_handler ‘end’ returning expression requires {
    swift_function: insertAtEnd
    operator: {atom [“end”], precedence: 1106}
}

