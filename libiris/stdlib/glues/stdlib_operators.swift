//
//  stdlib_operators.swift
//
//  Operator definitions for primitive handlers.
//
//  This file is auto-generated; do not edit directly.
//

import Foundation

public func stdlib_loadOperators(into registry: OperatorRegistry) {
    registry.add([.expression, .keyword("AND"), .expression], 398, .left)
    registry.add([.expression, .keyword(["thru", "through"]), .expression], 1120, .left)
    registry.add([.keyword("NOT"), .expression], 400, .left)
    registry.add([.expression, .keyword("OR"), .expression], 396, .left)
    registry.add([.expression, .keyword("XOR"), .expression], 394, .left)
    registry.add([.expression, .keyword(["+", "＋"]), .expression], 1290, .left)
    registry.add([.boundExpression("element_type", "element_type"), .keyword("after"), .boundExpression("reference", "reference")], 1106, .right)
    registry.add([.keyword(["every", "all"]), .expression], 1130, .left)
    registry.add([.expression, .keyword(["at", "index"]), .expression], 1110, .left)
    registry.add([.boundExpression("element_type", "element_type"), .keyword("before"), .boundExpression("reference", "reference")], 1106, .right)
    registry.add([.expression, .keyword("begins_with"), .expression], 542, .left)
    registry.add([.expression, .keyword("as"), .expression], 350, .left)
    registry.add([.expression, .keyword("contains"), .expression], 542, .left)
    registry.add([.keyword("to"), .boundExpression("interface", "interface"), .keyword("run"), .boundExpression("action", "action")], 80, .left)
    registry.add([.keyword("when"), .boundExpression("interface", "interface"), .keyword("run"), .boundExpression("action", "action")], 80, .left)
    registry.add([.expression, .keyword("div"), .expression], 1296, .left)
    registry.add([.expression, .keyword(["/", "÷"]), .expression], 1296, .left)
    registry.add([.expression, .keyword("ends_with"), .expression], 542, .left)
    registry.add([.expression, .keyword(["^", "to_the_power_of"]), .expression], 1300, .right)
    registry.add([.keyword("first"), .expression], 1130, .left)
    registry.add([.expression, .keyword("id"), .expression], 1110, .left)
    registry.add([.keyword("if"), .boundExpression("test", "condition"), .keyword("then"), .boundExpression("then", "action"), .optional([.keyword("else"), .boundExpression("else", "alternative_action")])], 101, .left)
    registry.add([.keyword("after"), .boundExpression("reference", "reference")], 1106, .left)
    registry.add([.keyword("beginning")], 1106, .left)
    registry.add([.keyword("end")], 1106, .left)
    registry.add([.keyword("before"), .boundExpression("reference", "reference")], 1106, .left)
    registry.add([.expression, .keyword("is_a"), .expression], 540, .left)
    registry.add([.expression, .keyword("is_after"), .expression], 540, .left)
    registry.add([.expression, .keyword("is_before"), .expression], 540, .left)
    registry.add([.expression, .keyword(["=", "=="]), .expression], 540, .left)
    registry.add([.expression, .keyword(["≥", ">="]), .expression], 540, .left)
    registry.add([.expression, .keyword(">"), .expression], 540, .left)
    registry.add([.expression, .keyword("is_in"), .expression], 542, .left)
    registry.add([.expression, .keyword(["≤", "<="]), .expression], 540, .left)
    registry.add([.expression, .keyword("<"), .expression], 540, .left)
    registry.add([.expression, .keyword(["is_not_after", "is_before_or_same_as"]), .expression], 540, .left)
    registry.add([.expression, .keyword(["is_not_before", "is_same_as_or_after"]), .expression], 540, .left)
    registry.add([.expression, .keyword(["≠", "<>"]), .expression], 540, .left)
    registry.add([.expression, .keyword("is_not_same_as"), .expression], 540, .left)
    registry.add([.expression, .keyword("is_same_as"), .expression], 540, .left)
    registry.add([.expression, .keyword("&"), .expression], 340, .left)
    registry.add([.keyword("last"), .expression], 1130, .left)
    registry.add([.keyword("middle"), .expression], 1130, .left)
    registry.add([.expression, .keyword("mod"), .expression], 1296, .left)
    registry.add([.expression, .keyword(["*", "×"]), .expression], 1296, .left)
    registry.add([.expression, .keyword("named"), .expression], 1110, .left)
    registry.add([.keyword(["-", "negative", "－", "−", "﹣"]), .boundExpression("right", "right")], 1298, .left, reductionForNegativeOperator)
    registry.add([.expression, .keyword("of"), .expression], 1100, .right)
    registry.add([.keyword(["+", "positive", "＋"]), .boundExpression("right", "right")], 1298, .left, reductionForPositiveOperator)
    registry.add([.keyword(["any", "some"]), .expression], 1130, .left)
    registry.add([.expression, .keyword("from"), .expression], 1110, .left)
    registry.add([.keyword("repeat"), .boundExpression("condition", "condition"), .keyword("while"), .boundExpression("action", "action")], 101, .left)
    registry.add([.expression, .keyword("returning"), .expression], 300, .left)
    registry.add([.keyword("set"), .boundExpression("name", "name"), .keyword("to"), .boundExpression("to", "value")], 80, .left)
    registry.add([.expression, .keyword(["-", "－", "−", "﹣"]), .expression], 1290, .left)
    registry.add([.keyword("tell"), .boundExpression("target", "target"), .keyword("to"), .boundExpression("action", "action")], 101, .left)
    registry.add([.expression, .keyword(["whose", "where"]), .expression], 1110, .left)
    registry.add([.keyword("while"), .boundExpression("condition", "condition"), .keyword("repeat"), .boundExpression("action", "action")], 101, .left)
    registry.add([.keyword("editable"), .optional(.boundExpression("of_type", "value_type"))], 1500, .left)
    registry.add([.keyword("optional"), .optional(.expression), .optional([.keyword("with_default"), .boundExpression("with_default", "default_value")])], 1500, .left)
    registry.add([.keyword("record"), .optional(.boundExpression("of_type", "record_type"))], 1500, .left)
}
